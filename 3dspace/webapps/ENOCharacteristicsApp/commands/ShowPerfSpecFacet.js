define("DS/ENOCharacteristicsApp/commands/ShowPerfSpecFacet",["UWA/Core","UWA/Class","DS/Windows/Dialog","DS/Controls/Button","DS/Notifications/NotificationsManagerUXMessages","DS/Notifications/NotificationsManagerViewOnScreen","DS/ENOCharacteristicsApp/ENOCharacteristicsApp","DS/XSRCommonComponents/service/CommandsService","DS/ENOCharacteristicsApp/utils/CharacteristicsEvents","DS/XSRCommonComponents/utils/XspecEvents","DS/XSRCommonComponents/service/XSpecsActionsFactory","DS/XSRCommonComponents/utils/RequestUtil","DS/ENOCharacteristicsApp/utils/RequestUtil","DS/XSRCommonComponents/utils/Notification","DS/XSRCommonComponents/components/XSpecRouter/XSpecRouteManager","DS/EditPropWidget/facets/Common/FacetsBase","UWA/Controls/Abstract","DS/SpecGridView/model/GridItemModel","DS/CfgAuthoringContextUX/scripts/CfgAuthoringContext","DS/PlatformAPI/PlatformAPI","i18n!DS/ENOCharacteristicsApp/assets/nls/ENOCharacteristicsApp"],function(e,t,n,i,s,o,a,r,l,c,d,u,m,p,f,h,C,S,g,_,v){"use strict";return t.extend(C,h,{_PerformanceSpecView:null,items:[],modal:null,transactionParameters:null,sTenentID:"OnPremise",securityContext:null,myBaseAppURL:null,options:null,_notif_manager:null,init:function(t){var n=this;this.options=t,t=e.extend(t,{isAsynchronous:!1}),this._parent(t),widget.data.appId||widget.data.appId,n.firstLoad=!0,n.elements.container||(n.elements.container=new e.Element("div",{class:"perfspec-container",styles:{height:"100%"}})),u.set3DSpaceURL().then(n._setCSRFToken.bind(n)).then(n._handlePreferences.bind(n)).then(()=>{n._buildView(t)})},_buildView:function(e){var t={};this.modelEvents=new l;var n={modelEvents:this.modelEvents};d.setOptions(n),null===this._notif_manager&&(this._notif_manager=s,o.setNotificationManager(this._notif_manager),o.setStackingPolicy(5),o.setRemoveStackOnFirstTimeoutFlag(!0),o.setFadeOutPolicy(2));var i=this.options.appContext.getSelectedRefId(),c=new S,u=this.buildParentModel(c),m=new f({modelEvents:this.modelEvents});(t={perfSpecAsPlugin:!0,basicModelEvents:this.modelEvents,specRouteManager:m}).specRouteManager.setActiveSpecItem(u),this.initializeWorkUnder(t);n={itemId:i,container:this.elements.container,appCore:t,currentTabKey:this.options.currentTabKey,specModel:u};this.charAppInstance=new a(n);var p={modelEvents:this.modelEvents};r.initialize(p)},initializeWorkUnder:function(e){_.subscribe(g.myAuthkey,function(t){var n=t.change,i={};if(i.id=n.id,i.name=n.name,i.id){e.wucCtxCapSet=!0;let t="pid:"+i.id;e.wucCtxCapValue=t}})},updateFacet(){this.firstLoad?this.firstLoad=!1:(this.charAppInstance.destroy(),this._buildView())},onResize(){},onRefresh(){this.updateFacet()},buildParentModel:function(e){let t=this.options.modelInfo.title,n=this.options.modelInfo.maturity;return e._options={},e._options.title=t,e._options.currentAccess="",e._options.maturity=n,e.isBeyondInWork=(()=>"In Work"!=n),e.getMaturityActualName=(()=>{return{"In Work":"IN_WORK",Frozen:"FROZEN",Released:"RELEASED",Obsolete:"OBSOLETE"}[n]||"IN_WORK"}),e},_setCSRFToken:function(){return new Promise((e,t)=>{u.setCSRFToken(),u.setSecurityContext();const n=setInterval(function(){void 0!==u.getSecurityContext()&&(clearInterval(n),e())},200)})},_handlePreferences:function(){var e=this;return new Promise((t,n)=>{var i=widget.hasPreference("Current_security_credentials");u.isCloud()&&e.addPlatformPreference(!0),i&&null!=widget.getValue("Current_security_credentials")?t():u.retrieveSCList({callback:function(e){var n=u.getSCPreferenceList("Credentials"),i=u.getSecurityContext();if(i){var s=i.substring(5);widget.setValue("Current_security_credentials",s),widget.setValue("SC",s),widget.setValue("pad_security_ctx",s),widget.setValue("xPref_CREDENTIAL",s),n.defaultValue=s,n.defaultValueNonNls=s}widget.addPreference(n),t()}}),u.setSecurityContext(),setTimeout(()=>{widget.getValue("Current_security_credentials")||p.displayNotification({eventID:"error",msg:"Credentials are not selected. Choose credentials from widget preferences."})},2e3)})},addPlatformPreference:function(e){let t=u.getTenantList(),n=u.getPlatformId();t.forEach(e=>{console.log(e)}),console.log(n);let i=t.find(e=>e.platformId==n);null==i&&(i=t[0],console.log("Preferred Platform not available, using the first one")),widget.addPreference({name:"x3dPlatformId",defaultValue:n,type:e?"list":"hidden",label:v.label_3DEXPERIENCEPlatform,options:t.map(function(e){return{label:e.displayName,value:e.platformId||e.name}}),onchange:"onPlatformIdChange",disabled:t.length<2})},destroyComponent:function(){this.charAppInstance.destroy()}})});