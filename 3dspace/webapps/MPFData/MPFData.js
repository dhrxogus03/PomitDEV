define("DS/MPFData/MPFData",[],()=>{"use strict";const e="GET",t="json";return{async request(e,t={}){const r=this._sanitizeOptions(t);try{const t=await this._fetch(e,r);let s=t.response;const n=t.status;if(400===n&&s&&s.error&&"invalid_grant"===s.error){s=(await this._callPassport(s.x3ds_auth_url)).response}else n>=400&&n<600?r.onFailure(new Error('NetworkError: URL "'+t.responseURL+'" return ResponseCode with value "'+(t.status||0)+'".'),s):r.onComplete(s)}catch(e){r.onFailure(e)}},_sanitizeOptions:t=>({httpVerb:t.httpVerb||e,headers:t.headers,data:t.data,onComplete:"function"==typeof t.onComplete?t.onComplete:()=>{},onFailure:"function"==typeof t.onFailure?t.onFailure:e=>{console.error(e)}}),_fetch(r,{httpVerb:s,headers:n={},data:o}={}){return new Promise((a,i)=>{const c=new XMLHttpRequest;c.responseType=t,c.addEventListener("load",a.bind(this,c)),c.addEventListener("error",i.bind(this,c)),c.open(s||e,r),Object.keys(n).forEach(e=>{c.setRequestHeader(e,n[e])}),c.setRequestHeader("Accept","application/json, application/ds-json"),c.withCredentials=!0,c.send(o)})},async _callPassport(e){const t=(await this._fetch(e)).response;if(!t||!t.x3ds_service_redirect_url){const t="service="+encodeURIComponent(window.location.href);window.location.replace(e.replace(/service=[^&]+/,t))}return this._fetch(t.x3ds_service_redirect_url)}}});