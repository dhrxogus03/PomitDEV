define("DS/DELWebOERPreferencesComp/PreferencesComp",["DS/DELWebOERCommonUtils/DELWebBaseComponent"],function(e){"use strict";const t={oldValue:"oldValue",value:"value",onEdit:"onEdit",endEdit:"endEdit",onRefresh:"onRefresh"};return class extends e{constructor(e){super(e),this.preferencesMap={},this.configFile=e.configFile,this.nlsAMDPath=e.nlsAMDPath,this.preferences=null,this.widget=null}async initialize(){let e,i=this;if(i.widget=this.getWidgetComponent(),await super.initialize(),!this.widget)throw new Error("getSessionWidget function not found in the Widget Proxy Component, it is mandatory to have a getSessionWidget function in proxy component");if(i.widget.addEvent(t.onEdit,function(){i._updatePreferencesMap(t.oldValue)}),i.widget.addEvent(t.endEdit,function(e){e&&!0===e.submitted&&(i._updatePreferencesMap(t.value),i.publish({event:"onUpdatePreferences",data:{data:i.getPreferencesObject()}}))}),e=await this.loadJson(this.configFile),await this.loadNLS(this.nlsAMDPath),!e||!e.preferences)throw new Error("Configuration File provided does not match the specifications, please provide right configuration");this.preferences=e.preferences,this.addPreferences(this.preferences)}_updatePreferencesMap(e){let t=this,i=t.getPreferencesObject();Object.keys(i).forEach(s=>{t.preferencesMap[s]?t.preferencesMap[s][e]=i[s]:(t.preferencesMap[s]={},t.preferencesMap[s][e]=i[s])})}addPreferences(e){let t=this,i=function(){return t.widget.getValue("x3dPlatformId")?t.widget.getValue("x3dPlatformId"):"OnPremise"};e&&(e=e.filter(e=>!e.platform||("OnPremise"===e.platform?i():"OnCloud"===e.platform&&!i())),t.widget.mergePreferences(e))}async clean(){await super.clean(),this.preferencesMap={}}async destroy(){await super.destroy(),delete this.preferencesMap,delete this.options,delete this.widget,delete this.nlsAMDPath,delete this.configFile}getExposedComponent(){return this.publicAPI=super.getExposedComponent(),this.publicAPI.addPreferences=this.addPreferences.bind(this),this.publicAPI.getPreferencesObject=this.getPreferencesObject.bind(this),this.publicAPI.isPreferencesModified=this.isPreferencesModified.bind(this),this.publicAPI.getValue=this.getValue.bind(this),this.publicAPI.setValue=this.setValue.bind(this),this.publicAPI}getPreferencesObject(){let e={};return this.widget.getPreferences().forEach(t=>{e[t.name]=t.value}),e}isPreferencesModified(e){let i=this,s=!1;return e&&e.length>0&&(s=e.some(e=>!!i.preferencesMap[e]&&i.preferencesMap[e][t.oldValue]!==i.preferencesMap[e][t.value])),s}getValue(e){return this.widget.getValue(e)}setValue(e,t){return this.widget.setValue(e,t)}}});