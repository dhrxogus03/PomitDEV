define("DS/RTConvAPI/formatters/formatRTCResponse",[],function(){"use strict";function t(t){return{login:t.login,first_name:t.firstName,last_name:t.lastName,username:t.login,email:t.email,uuid:t.uuid,country:t.country}}return{RTCUserToSwymUser:t,RTCConvToSwymConv:function(e){return{id:e.id,subject_uri:e.subjectUri,uri:e.subjectUri,community_type:"dm",dm_type:e.isPrivate?"private":"group",topic:e.title,creation_date:e.dateCreation,is_hidden:e.isHidden,last_message:e.lastMsgId?{message_id:e.lastMsgId}:null,mark:e.lastMsgReadId?{message_id:e.lastMsgReadId}:null,users:e.members&&e.members.map(t)||[],updated_at:e.dateLastMsgCreate,position:-1!==e.favorite?e.favorite:null}}}}),define("DS/RTConvAPI/drivers/Swym_driver",["DS/WAFData/WAFData","DS/i3DXCompassPlatformServices/i3DXCompassRegistryClient","DS/PlatformAPI/PlatformAPI"],function(t,e,s){"use strict";class r{constructor(t){this.platformId=t,this.swymUrl=null,this.csrftoken=null}static getInstance(t){return t?((!this.instance||!this.instance.platformId||t&&this.instance.platformId!==t)&&(this.instance=new r(t)),this.instance):console.error("SwymDriver needs a platformId")}getSwymUrl(){return new Promise((t,r)=>{if(this.swymUrl)return t();e.getServicesByPlatform({services:["3DSWYM"],platforms:[this.platformId],config:{url:s.getApplicationConfiguration("app.urls.registry")}}).then(e=>{if(!e||!e[0]||!e[0].services)return r("failed to retrieve the 3DSwym url of tenant "+this.tenant);this.swymUrl=e[0].services[0].url,t(this.swymUrl)}).catch(t=>r(t))})}getCSRFToken(){return new Promise((e,s)=>{if(!this.swymUrl)return s("Need Swym url to get CSRF");if(this.csrftoken)return e();const r=this.swymUrl+"/api/index/tk";t.authenticatedRequest(r,{method:"GET",proxy:"passport",onComplete(t){const r=JSON.parse(t);r&&r.result&&r.result.ServerToken?e(r.result.ServerToken):s("Failed to get CSRF from 3DPassport")},onFailure(t){s(t)}})})}getIfExistsConversationRequest(e,s){return new Promise((r,n)=>{if(!this.csrftoken)return n("can not request 3DSwym without CSRF token");if(!this.swymUrl)return n("can not request 3DSwym without its url");const i=`${this.swymUrl}/api/directmessages/private/?login=${e}&unhide=${s}`;t.authenticatedRequest(i,{method:"GET",proxy:"passport",type:"json",headers:{Accept:"application/json","x-ds-swym-csrftoken":this.csrftoken},onComplete(t){t&&t.result?r(t.result):r(null)},onFailure(t,e){this.csrftoken=null,n(t)}})})}getIfExistsSwymConversation(t,e=!0){return this.getSwymUrl().then(()=>this.getCSRFToken()).then(s=>(this.csrftoken=s||this.csrftoken,this.getIfExistsConversationRequest(t,e)))}sendCreateConversationRequest(e,s){return new Promise((r,n)=>{if(!this.csrftoken)return n("can not request 3DSwym without CSRF token");if(!this.swymUrl)return n("can not request 3DSwym without its url");const i=this.swymUrl+"/api/directmessages";t.authenticatedRequest(i,{method:"POST",proxy:"passport",data:JSON.stringify({users:e,...s?{topic:s}:void 0}),type:"json",headers:{Accept:"application/json","Content-type":"application/json","x-ds-swym-csrftoken":this.csrftoken},onComplete(t){t&&t.result&&t.result.id?r(t.result):n("incomplete result from 3DSwym")},onFailure(t,e){e&&e.result&&e.result.id?r(e.result):(this.csrftoken=null,n(t))}})})}createSwymConversation(t,e){return this.getSwymUrl().then(()=>this.getCSRFToken()).then(s=>(this.csrftoken=s||this.csrftoken,this.sendCreateConversationRequest(t,e)))}getSwymConversationRequest(e){return new Promise((s,r)=>{if(!this.csrftoken)return r("can not request 3DSwym without CSRF token");if(!this.swymUrl)return r("can not request 3DSwym without its url");const n=`${this.swymUrl}/api/directmessages/${e}`;t.authenticatedRequest(n,{method:"GET",proxy:"passport",type:"json",headers:{Accept:"application/json","x-ds-swym-csrftoken":this.csrftoken},onComplete(t){t&&t.result?s(t.result):r("incomplete result from 3DSwym")},onFailure(t,e){this.csrftoken=null,r(t)}})})}getSwymConversation(t){return this.getSwymUrl().then(()=>this.getCSRFToken()).then(e=>(this.csrftoken=e||this.csrftoken,this.getSwymConversationRequest(t)))}sendListConversationsRequest(e){return new Promise((e,s)=>{if(!this.csrftoken)return s("can not request 3DSwym without CSRF token");if(!this.swymUrl)return s("can not request 3DSwym without its url");const r=this.swymUrl+"/api/directmessages/lite";t.authenticatedRequest(r,{method:"GET",proxy:"passport",type:"json",headers:{Accept:"application/json","x-ds-swym-csrftoken":this.csrftoken},onComplete(t){t&&t.result?e(t.result):s("incomplete result from 3DSwym")},onFailure(t,e){this.csrftoken=null,s(t)}})})}listSwymConversations(t){return this.getSwymUrl().then(()=>this.getCSRFToken()).then(t=>(this.csrftoken=t||this.csrftoken,this.sendListConversationsRequest()))}sendListSwymConvMembersRequest(e){return new Promise((s,r)=>{if(!this.csrftoken)return r("can not request 3DSwym without CSRF token");if(!this.swymUrl)return r("can not request 3DSwym without its url");const n=this.swymUrl+"/api/community/listmembers";t.authenticatedRequest(n,{method:"POST",proxy:"passport",data:JSON.stringify({params:{as_admin:!1,community_id:e,displayTotalCount:!1,limit:9999,order_by_last_member:!1,page:1}}),type:"json",headers:{Accept:"application/json","Content-type":"application/json","x-ds-swym-csrftoken":this.csrftoken},onComplete(t){t&&t.result?s(t.result):r("incomplete result from 3DSwym")},onFailure(t,e){this.csrftoken=null,r(t)}})})}async listSwymConvMembers(t){await this.getSwymUrl();const e=await this.getCSRFToken();return this.csrftoken=e||this.csrftoken,this.sendListSwymConvMembersRequest(t)}}return r}),define("DS/RTConvAPI/drivers/RTC_driver",["DS/UWPClientCode/PublicAPI","DS/RTInterface/RTInterface","DS/RTConvAPI/formatters/formatRTCResponse","DS/i3DXCompassPlatformServices/i3DXCompassRegistryClient","DS/PlatformAPI/PlatformAPI"],function(t,e,s,r,n){"use strict";class i{constructor(t){this.platformId=t,this.isRTCCallbackRegistered=!1,this.isRTCActivated=null,this.TxIDLabel="RTConvAPI",this.events=["newConversation","getConversations","getConvMembers","search"],this.rtcUrl=""}static getInstance(t){return t?((!this.instance||!this.instance.platformId||t&&this.instance.platformId!==t)&&(this.instance=new i(t),this.instance.registerRTCCallback()),this.instance):console.error("RTConvAPI needs a platformId")}getRtcUrl(){return new Promise((t,e)=>{if(this.rtcUrl)return t(this.rtcUrl);r.getServicesByPlatform({services:["3DMESSAGING"],platforms:[this.platformId],config:{url:n.getApplicationConfiguration("app.urls.registry")}}).then(s=>{if(!s||!s[0]||!s[0].services)return e("failed to retrieve the 3DMESSAGING url of tenant "+this.platformId);this.rtcUrl=s[0].services[0].url,t(this.rtcUrl)}).catch(t=>e(t))})}checkRTCActivation(){return new Promise((t,e)=>{if(null!==this.isRTCActivated)return t(this.isRTCActivated);this.getRtcUrl().then(t=>fetch(t+"/conversation/isEnabled")).then(t=>t.json()).then(e=>("boolean"==typeof e.isEnabled&&(this.isRTCActivated=e.isEnabled),t(this.isRTCActivated))).catch(e=>t(!!this.isRTCActivated))})}static isConversationFromRTC(t){return!isNaN(Number(t))}registerRTCCallback(){return e.addCallback(t=>{const s=t.data;if(s&&s.action&&this.events.includes(s.action))return!s.error||s.error&&"newConversation"===s.action&&s.data&&s.data.id?e.triggerTxIDEvent(s.TxID,s.data,null,this.TxIDLabel):e.triggerTxIDEvent(s.TxID,null,s.error||"Error: No response data",this.TxIDLabel)},this.platformId,null,"conversation")}async createRTConversation({logins:t,uuids:r},n){const i=this.TxIDLabel;return new Promise((o,a)=>{e.sendAsync({action:"newConversation",data:{logins:t,uuids:r,title:n}},i).then(t=>{t&&t.conversation?o(s.RTCConvToSwymConv(t.conversation)):a("incomplete result from RTC")}).catch(t=>{a(t)})})}async getRTConversation(t){const r=this.TxIDLabel;return new Promise((n,i)=>{e.sendAsync({action:"getConversations",data:{convIds:[t]}},r).then(t=>{t&&t.conversations&&Array.isArray(t.conversations)?t.conversations.length>0?n(s.RTCConvToSwymConv(t.conversations[0])):n():i("incomplete result from RTC")}).catch(t=>{i(t)})})}async listRTConversations(t){const r=this.TxIDLabel;return new Promise((t,n)=>{e.sendAsync({action:"getConversations",data:{all:!0}},r).then(e=>{e&&e.conversations&&Array.isArray(e.conversations)?e.conversations.length>0?t(e.conversations.map(s.RTCConvToSwymConv)):t([]):n("incomplete result from RTC")}).catch(t=>{n(t)})})}async listRTConvMembers(t){return new Promise((r,n)=>{e.sendAsync({action:"getConvMembers",data:{convId:Number(t)}},this.TxIDLabel).then(t=>{t&&t.members&&Array.isArray(t.members)?r(t.members.map(s.RTCUserToSwymUser)):n("incomplete result from RTC")}).catch(t=>{n(t)})})}async search(t){return new Promise((r,n)=>{e.sendAsync({action:"search",data:{query:t}},this.TxIDLabel).then(t=>{t&&t.conversations&&Array.isArray(t.conversations)?r(t.conversations.map(s.RTCConvToSwymConv)):n("incomplete result from RTC")}).catch(t=>{n(t)})})}}return i}),define("DS/RTConvAPI/RTConvAPI",["DS/RTConvAPI/drivers/RTC_driver","DS/RTConvAPI/drivers/Swym_driver"],function(t,e){"use strict";class s{constructor(s){this.platformId=s,this.MAX_NB_USERS_IN_DM=15,this.RTCDriver=t.getInstance(s),this.SwymDriver=e.getInstance(s)}static getInstance(t){return t?((!this.instance||!this.instance.platformId||t&&this.instance.platformId!==t)&&(this.instance=new s(t)),this.instance):console.error("RTConvAPI needs a platformId")}getConversationUrl(t){return`${this.SwymDriver.swymUrl}/dm/${t.uri||t.subject_uri}`}getConversation({logins:t,uuids:e,topic:s,dmId:r}){if(r){const t=Number(r);return isNaN(t)?this.SwymDriver.getSwymConversation(r):this.RTCDriver.getRTConversation(t)}return this.createConversation({logins:t,uuids:e,topic:s})}createConversation({logins:t,uuids:e,topic:s}){return new Promise((r,n)=>(!t||!Array.isArray(t)||!t.length>1||t.length>this.MAX_NB_USERS_IN_DM)&&(!e||!Array.isArray(e)||!e.length>1||e.length>this.MAX_NB_USERS_IN_DM)?n("logins or uuids must be an array and its length must be >1 and <"+this.MAX_NB_USERS_IN_DM):this.platformId?void this.SwymDriver.getSwymUrl().then(()=>{if(t&&Array.isArray(t)&&1===t.length)return this.SwymDriver.getIfExistsSwymConversation(t[0])}).then(n=>{n?(n.url=this.getConversationUrl(n),r(n)):this.RTCDriver.checkRTCActivation().then(r=>r?this.RTCDriver.createRTConversation({logins:t,uuids:e},s):this.SwymDriver.createSwymConversation(t,s)).then(t=>{t.url=this.getConversationUrl(t),r(t)})}).catch(t=>{n(t)}):n("platformId must be defined"))}listConversations({page:t}){return new Promise((e,s)=>{if(!this.platformId)return s("platformId must be defined");this.RTCDriver.checkRTCActivation().then(s=>{s?Promise.allSettled([this.RTCDriver.listRTConversations(t),this.SwymDriver.listSwymConversations(t)]).then(t=>{const s=[];for(const e of t)"fulfilled"===e.status&&s.push(...e.value);e(s)}):e(this.SwymDriver.listSwymConversations(t))})})}listConvMembers({dmId:e}){return new Promise((s,r)=>e?this.platformId?void s(t.isConversationFromRTC(e)?this.RTCDriver.listRTConvMembers(e):this.SwymDriver.listSwymConvMembers(e)):r("platformId must be defined"):r("dmId must be defined"))}search({query:t}){return new Promise((e,s)=>t?this.platformId?void this.RTCDriver.checkRTCActivation().then(s=>{e(s?this.RTCDriver.search(t):[])}):s("platformId must be defined"):s("query must be defined"))}}return{getConv:function({platformId:t,login:e,logins:r,uuid:n,uuids:i,topic:o,dmId:a}){return s.getInstance(t).getConversation({logins:r||e?r||[e]:null,uuids:i||n?i||[n]:null,topic:o,dmId:a})},listConv:function({platformId:t,page:e}){return s.getInstance(t).listConversations({page:e})},listConvMembers:function({platformId:t,dmId:e}){return s.getInstance(t).listConvMembers({dmId:e})},search:function({platformId:t,query:e}){return s.getInstance(t).search({query:e})},getInstance:s.getInstance}});