define("DS/MPFFiniteStateMachine/FiniteStateMachine",["UWA/Core","UWA/Class"],(t,i)=>{"use strict";return i.extend({init(i){if(!t.is(i.states,"array"))throw new Error("states is required and must be an array");if(!t.is(i.state))throw new Error("state is required");if(!t.is(i.transitions,"array"))throw new Error("transitions must be an array");if(this.states=i.states.slice(),this.state=i.state,!this._checkTransitionDefinition(i.transitions))throw new Error("transitions definitions is not valid");this.transitions=i.transitions.slice()},getState(){return this.state},isState(t){return this.state===t},changeState(t){let i=!1;return this._checkTransition(this.state,t)&&(this.state=t,i=!0),i},_hasState(t){return this.states.indexOf(t)>=0},_checkTransition(t,i){return!!this.transitions.find(s=>s.from===t&&s.to===i)},_checkTransitionDefinition(i){const s=this;let e=!1;return t.is(i,"array")&&(e=i.reduce(function(t,i){return t&&s._hasState(i.from)&&s._hasState(i.to)},!0)),e}})});