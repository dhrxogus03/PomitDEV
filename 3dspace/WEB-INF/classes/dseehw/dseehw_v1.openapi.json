{
  "openapi": "3.0.0",
  "info": {
    "description": "dseehw: Logical corpus REST Services provided in 3DSpace service for EE Logical objects",
    "version": "1.4.0",
    "title": "EE Logical Web Services"
  },
  "servers": [
    {
      "url": "{3DSpace}",
      "variables": {
        "3DSpace": {
          "default": "https://3DEXPERIENCE_3DSpace",
          "description": "URL of the 3DSpace service"
        }
      }
    }
  ],
  "paths": {
    "/resources/v1/modeler/dseehw/dseehw:EELogItem/{PID}/dseehw:EELogInstance/{ID}": {
      "patch": {
        "summary": "Modifies the EE Logical Item Instance attributes ",
        "description": "Modifies the EE Logical Item Instance attributes ",
        "operationId": "PATCH_PATCH_dseehw:EELogItem_PID_dseehw:EELogInstance_ID",
        "tags": [
          "dseehw:EELogInstance"
        ],
        "parameters": [
          {
            "name": "SecurityContext",
            "in": "header",
            "description": "Role.Organization.CollabSpace value Ex:VPLMProjectLeader.MyCompany.Default",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ENO_CSRF_TOKEN",
            "in": "header",
            "description": "csrf token. You can get it from 3DSpace/resources/v1/application/CSRF",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "PID",
            "in": "path",
            "description": "dseehw:EELogItem object ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ID",
            "in": "path",
            "description": "dseehw:EELogInstance object ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "$mva",
            "description": "Multi Valuated Attributes support. Default mva value is : false",
            "required": false,
            "schema": {
              "type": "boolean",
              "enum": [
                "true",
                "false"
              ]
            }
          },
          {
            "in": "query",
            "name": "$mask",
            "description": "Mask defining what will be returned. Default Mask is:dskern:Mask.Default",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "dskern:Mask.Default",
                "dsmvlog:LogInstance.Mask.Instance.Details",
                "dsmvlogee:EELogInstance.Mask.Instance.Details"
              ]
            }
          },
          {
            "in": "query",
            "name": "$fields",
            "description": "We can add several fields with comma(,) separator to get in the response.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "dsmveno:SupportedTypes",
                "dsmveno:CustomerAttributes",
                "dseehw:SupportedTypes"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dseehw_EELogInstance_PATCH"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Request successful.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/dsmveno_DefaultRelMask.public_WithCEStamp"
                    },
                    {
                      "$ref": "#/components/schemas/dsmvlog_EELogInstance.Mask.Instance.Details_WithCEStamp"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "BAD REQUEST. The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "My message"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "UNAUTHORIZED. The request requires user authentication. The response MUST include a WWW-Authenticate header field containing a challenge applicable to the requested resource. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials. If the 401 response contains the same challenge as the prior response, and the user agent has already attempted authentication at least once, then the user SHOULD be presented the entity that was given in the response, since that entity might include relevant diagnostic information. HTTP access authentication is explained in \"HTTP Authentication: Basic and Digest Access Authentication\".",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "My message"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "FORBIDDEN. The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated. If the request method was not HEAD and the server wishes to make public why the request has not been fulfilled, it SHOULD describe the reason for the refusal in the entity. If the server does not wish to make this information available to the client, the status code 404 (Not Found) can be used instead.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 403
                    },
                    "message": {
                      "type": "string",
                      "example": "My message"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "INTERNAL SERVER ERROR. A generic error message, given when an unexpected condition was encountered and no more specific message is suitable.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "example": "My message"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Gets an EE Logical Item Instance",
        "description": "Gets an EE Logical Item Instance",
        "operationId": "GET_dseehw:EELogItem_PID_dseehw:EELogInstance_ID",
        "tags": [
          "dseehw:EELogInstance"
        ],
        "parameters": [
          {
            "name": "SecurityContext",
            "in": "header",
            "description": "Role.Organization.CollabSpace value Ex:VPLMProjectLeader.MyCompany.Default",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "PID",
            "in": "path",
            "description": "dseehw:EELogItem object ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ID",
            "in": "path",
            "description": "dseehw:EELogInstance object ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "$mva",
            "description": "Multi Valuated Attributes support. Default mva value is : false",
            "required": false,
            "schema": {
              "type": "boolean",
              "enum": [
                "true",
                "false"
              ]
            }
          },
          {
            "in": "query",
            "name": "$mask",
            "description": "Mask defining what will be returned. Default Mask is:dskern:Mask.Default",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "dskern:Mask.Default",
                "dsmvlog:LogInstance.Mask.Instance.Details",
                "dsmvlogee:EELogInstance.Mask.Instance.Details"
              ]
            }
          },
          {
            "in": "query",
            "name": "$fields",
            "description": "We can add several fields with comma(,) separator to get in the response.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "dsmveno:SupportedTypes",
                "dsmveno:CustomerAttributes",
                "dseehw:SupportedTypes"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/dsmveno_DefaultRelMask.public_WithCEStamp"
                    },
                    {
                      "$ref": "#/components/schemas/dsmvlog_EELogInstance.Mask.Instance.Details_WithCEStamp"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "BAD REQUEST. The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "My message"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "UNAUTHORIZED. The request requires user authentication. The response MUST include a WWW-Authenticate header field containing a challenge applicable to the requested resource. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials. If the 401 response contains the same challenge as the prior response, and the user agent has already attempted authentication at least once, then the user SHOULD be presented the entity that was given in the response, since that entity might include relevant diagnostic information. HTTP access authentication is explained in \"HTTP Authentication: Basic and Digest Access Authentication\".",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "My message"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "INTERNAL SERVER ERROR. A generic error message, given when an unexpected condition was encountered and no more specific message is suitable.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "example": "My message"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete an EE Logical Item Instance",
        "description": "Delete an EE Logical Item Instance",
        "operationId": "DELETE_dseehw:EELogItem_PID_dseehw:EELogInstance_ID",
        "tags": [
          "dseehw:EELogInstance"
        ],
        "parameters": [
          {
            "name": "SecurityContext",
            "in": "header",
            "description": "Role.Organization.CollabSpace value Ex:VPLMProjectLeader.MyCompany.Default",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ENO_CSRF_TOKEN",
            "in": "header",
            "description": "csrf token. You can get it from 3DSpace/resources/v1/application/CSRF",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "PID",
            "in": "path",
            "description": "dslogee:EELogItem object ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ID",
            "in": "path",
            "description": "dslogee:EELogInstance object ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK. The request has succeeded. The information returned with the response is dependent on the method used in the request, for example: GET an entity corresponding to the requested resource is sent in the response; HEAD the entity-header fields corresponding to the requested resource are sent in the response without any message-body; POST an entity describing or containing the result of the action; TRACE an entity containing the request message as received by the end server.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "My message"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "BAD REQUEST. The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "My message"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "UNAUTHORIZED. The request requires user authentication. The response MUST include a WWW-Authenticate header field containing a challenge applicable to the requested resource. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials. If the 401 response contains the same challenge as the prior response, and the user agent has already attempted authentication at least once, then the user SHOULD be presented the entity that was given in the response, since that entity might include relevant diagnostic information. HTTP access authentication is explained in \"HTTP Authentication: Basic and Digest Access Authentication\".",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "My message"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "FORBIDDEN. The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated. If the request method was not HEAD and the server wishes to make public why the request has not been fulfilled, it SHOULD describe the reason for the refusal in the entity. If the server does not wish to make this information available to the client, the status code 404 (Not Found) can be used instead.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 403
                    },
                    "message": {
                      "type": "string",
                      "example": "My message"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "INTERNAL SERVER ERROR. A generic error message, given when an unexpected condition was encountered and no more specific message is suitable.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "example": "My message"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/resources/v1/modeler/dslogee/dslogee:EELogItem/{ID}/dslogee:EELogInstance": {
      "post": {
        "summary": "Create EE Logical Instances for an Item",
        "description": "Create EE Logical Instances for an Item. Instances can be of several types",
        "operationId": "dslogee:EELogItem_ID_dslogee:EELogInstance",
        "tags": [
          "dslogee:EELogInstance"
        ],
        "parameters": [
          {
            "name": "SecurityContext",
            "in": "header",
            "description": "Role.Organization.CollabSpace value Ex:VPLMProjectLeader.MyCompany.Default",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ENO_CSRF_TOKEN",
            "in": "header",
            "description": "csrf token. You can get it from 3DSpace/resources/v1/application/CSRF",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ID",
            "in": "path",
            "description": "dslogee:EELogItem object ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "$mva",
            "description": "Multi Valuated Attributes support. Default mva value is : false",
            "required": false,
            "schema": {
              "type": "boolean",
              "enum": [
                "true",
                "false"
              ]
            }
          },
          {
            "in": "query",
            "name": "$mask",
            "description": "Mask defining what will be returned. Default Mask is:dskern:Mask.Default",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "dskern:Mask.Default",
                "dsmvlog:LogInstance.Mask.Instance.Details",
                "dsmvlogee:EELogInstance.Mask.Instance.Details"
              ]
            }
          },
          {
            "in": "query",
            "name": "$fields",
            "description": "We can add several fields with comma(,) separator to get in the response.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "dsmveno:SupportedTypes",
                "dsmveno:CustomerAttributes"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createEELogicalInstances"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Request successful.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/dsmveno_DefaultRelMask.public_WithCEStamp"
                    },
                    {
                      "$ref": "#/components/schemas/dsmvlog_EELogInstance.Mask.Instance.Details_WithCEStamp"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "BAD REQUEST. The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "My message"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "UNAUTHORIZED. The request requires user authentication. The response MUST include a WWW-Authenticate header field containing a challenge applicable to the requested resource. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials. If the 401 response contains the same challenge as the prior response, and the user agent has already attempted authentication at least once, then the user SHOULD be presented the entity that was given in the response, since that entity might include relevant diagnostic information. HTTP access authentication is explained in \"HTTP Authentication: Basic and Digest Access Authentication\".",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "My message"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "FORBIDDEN. The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated. If the request method was not HEAD and the server wishes to make public why the request has not been fulfilled, it SHOULD describe the reason for the refusal in the entity. If the server does not wish to make this information available to the client, the status code 404 (Not Found) can be used instead.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 403
                    },
                    "message": {
                      "type": "string",
                      "example": "My message"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "INTERNAL SERVER ERROR. A generic error message, given when an unexpected condition was encountered and no more specific message is suitable.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "example": "My message"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Gets all the EE Logical Item Instances",
        "description": "Gets all the EE Logical Item Instances",
        "operationId": "GETAll_dslogee:EELogItem_ID_dslogee:EELogInstance",
        "tags": [
          "dslogee:EELogInstance"
        ],
        "parameters": [
          {
            "name": "SecurityContext",
            "in": "header",
            "description": "Role.Organization.CollabSpace value Ex:VPLMProjectLeader.MyCompany.Default",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ID",
            "in": "path",
            "description": "dslogee:EELogItem object ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "$mva",
            "description": "Multi Valuated Attributes support. Default mva value is : false",
            "required": false,
            "schema": {
              "type": "boolean",
              "enum": [
                "true",
                "false"
              ]
            }
          },
          {
            "in": "query",
            "name": "$mask",
            "description": "Mask defining what will be returned. Default Mask is:dskern:Mask.Default",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "dskern:Mask.Default",
                "dsmvlog:LogInstance.Mask.Instance.Details",
                "dsmvlogee:EELogInstance.Mask.Instance.Details"
              ]
            }
          },
          {
            "in": "query",
            "name": "$fields",
            "description": "We can add several fields with comma(,) separator to get in the response.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "dsmveno:SupportedTypes",
                "dsmveno:CustomerAttributes"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/dsmveno_DefaultRelMask.public_WithCEStamp"
                    },
                    {
                      "$ref": "#/components/schemas/dsmvlog_EELogInstance.Mask.Instance.Details_WithCEStamp"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "BAD REQUEST. The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "My message"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "UNAUTHORIZED. The request requires user authentication. The response MUST include a WWW-Authenticate header field containing a challenge applicable to the requested resource. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials. If the 401 response contains the same challenge as the prior response, and the user agent has already attempted authentication at least once, then the user SHOULD be presented the entity that was given in the response, since that entity might include relevant diagnostic information. HTTP access authentication is explained in \"HTTP Authentication: Basic and Digest Access Authentication\".",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "My message"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "INTERNAL SERVER ERROR. A generic error message, given when an unexpected condition was encountered and no more specific message is suitable.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "example": "My message"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/resources/v1/modeler/dslogee/dslogee:EELogItem/{PID}/dslogee:EELogInstance/{ID}/replace": {
      "post": {
        "summary": "Replace the referenced EE Logical Item of a EE Logical Instance",
        "description": "Replace the referenced EE Logical Item of a EE Logical Instance",
        "operationId": "dslogee:EELogItem_PID_dslogee:EELogInstance_ID_REPLACE",
        "tags": [
          "dslogee:EELogInstance"
        ],
        "parameters": [
          {
            "name": "SecurityContext",
            "in": "header",
            "description": "Role.Organization.CollabSpace value Ex:VPLMProjectLeader.MyCompany.Default",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ENO_CSRF_TOKEN",
            "in": "header",
            "description": "csrf token. You can get it from 3DSpace/resources/v1/application/CSRF",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "PID",
            "in": "path",
            "description": "dslogee:EELogItem object ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ID",
            "in": "path",
            "description": "dslogee:EELogInstance object ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "$mask",
            "description": "Mask defining what will be returned. Default Mask is:dskern:Mask.Default",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "dskern:Mask.Default",
                "dsmvlog:LogInstance.Mask.Instance.Details",
                "dsmvlogee:EELogInstance.Mask.Instance.Details"
              ]
            }
          },
          {
            "in": "query",
            "name": "$fields",
            "description": "We can add several fields with comma(,) separator to get in the response.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "dsmveno:SupportedTypes",
                "dsmveno:CustomerAttributes"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/replaceEELogicalInstance_RefObject"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Request successful.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/dsmveno_DefaultRelMask.public_WithCEStamp"
                    },
                    {
                      "$ref": "#/components/schemas/dsmvlog_EELogInstance.Mask.Instance.Details_WithCEStamp"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "BAD REQUEST. The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "My message"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "UNAUTHORIZED. The request requires user authentication. The response MUST include a WWW-Authenticate header field containing a challenge applicable to the requested resource. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials. If the 401 response contains the same challenge as the prior response, and the user agent has already attempted authentication at least once, then the user SHOULD be presented the entity that was given in the response, since that entity might include relevant diagnostic information. HTTP access authentication is explained in \"HTTP Authentication: Basic and Digest Access Authentication\".",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "My message"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "FORBIDDEN. The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated. If the request method was not HEAD and the server wishes to make public why the request has not been fulfilled, it SHOULD describe the reason for the refusal in the entity. If the server does not wish to make this information available to the client, the status code 404 (Not Found) can be used instead.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 403
                    },
                    "message": {
                      "type": "string",
                      "example": "My message"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "INTERNAL SERVER ERROR. A generic error message, given when an unexpected condition was encountered and no more specific message is suitable.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "example": "My message"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/resources/v1/modeler/dslogee/dslogee:EELogItem/{ID}": {
      "patch": {
        "summary": "Modifies the EE Logical Item attributes",
        "description": "Modifies the EE Logical Item attributes",
        "operationId": "PATCH_dslogee:EELogItem_ID",
        "tags": [
          "dslogee:EELogItem"
        ],
        "parameters": [
          {
            "name": "SecurityContext",
            "in": "header",
            "description": "Role.Organization.CollabSpace value Ex:VPLMProjectLeader.MyCompany.Default",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ENO_CSRF_TOKEN",
            "in": "header",
            "description": "csrf token. You can get it from 3DSpace/resources/v1/application/CSRF",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ID",
            "in": "path",
            "description": "dslogee:EELogItem object ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "$mva",
            "description": "Multi Valuated Attributes support. Default mva value is : false",
            "required": false,
            "schema": {
              "type": "boolean",
              "enum": [
                "true",
                "false"
              ]
            }
          },
          {
            "in": "query",
            "name": "$mask",
            "description": "Mask defining what will be returned. Default Mask is:dskern:Mask.Default",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "dskern:Mask.Default",
                "dsmvlog:LogItem.Mask.Reference.Details",
                "dsmvlogee:EELogItem.Mask.Reference.Details"
              ]
            }
          },
          {
            "in": "query",
            "name": "$fields",
            "description": "We can add several fields with comma(,) separator to get in the response.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "dsmveno:SupportedTypes",
                "dsmveno:CustomerAttributes"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dslogee_EELogItem_PATCH"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Request successful.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/dsmveno_DefaultBusMask.public_WithCEStamp"
                    },
                    {
                      "$ref": "#/components/schemas/dsmvlog_EELogItem.Mask.Reference.Details_WithCEStamp"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "BAD REQUEST. The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "My message"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "UNAUTHORIZED. The request requires user authentication. The response MUST include a WWW-Authenticate header field containing a challenge applicable to the requested resource. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials. If the 401 response contains the same challenge as the prior response, and the user agent has already attempted authentication at least once, then the user SHOULD be presented the entity that was given in the response, since that entity might include relevant diagnostic information. HTTP access authentication is explained in \"HTTP Authentication: Basic and Digest Access Authentication\".",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "My message"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "FORBIDDEN. The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated. If the request method was not HEAD and the server wishes to make public why the request has not been fulfilled, it SHOULD describe the reason for the refusal in the entity. If the server does not wish to make this information available to the client, the status code 404 (Not Found) can be used instead.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 403
                    },
                    "message": {
                      "type": "string",
                      "example": "My message"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "INTERNAL SERVER ERROR. A generic error message, given when an unexpected condition was encountered and no more specific message is suitable.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "example": "My message"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Gets an EE Logical Item",
        "description": "Gets a EE Logical Item",
        "operationId": "GET_dslogee:EELogItem_ID",
        "tags": [
          "dslogee:EELogItem"
        ],
        "parameters": [
          {
            "name": "SecurityContext",
            "in": "header",
            "description": "Role.Organization.CollabSpace value Ex:VPLMProjectLeader.MyCompany.Default",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ID",
            "in": "path",
            "description": "dslogee:EELogItem object ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "$mva",
            "description": "Multi Valuated Attributes support. Default mva value is : false",
            "required": false,
            "schema": {
              "type": "boolean",
              "enum": [
                "true",
                "false"
              ]
            }
          },
          {
            "in": "query",
            "name": "$mask",
            "description": "Mask defining what will be returned. Default Mask is:dskern:Mask.Default",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "dskern:Mask.Default",
                "dsmvlog:LogItem.Mask.Reference.Details",
                "dsmvlogee:EELogItem.Mask.Reference.Details"
              ]
            }
          },
          {
            "in": "query",
            "name": "$fields",
            "description": "We can add several fields with comma(,) separator to get in the response.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "dsmveno:SupportedTypes",
                "dsmveno:CustomerAttributes"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/dsmveno_DefaultBusMask.public_WithCEStamp"
                    },
                    {
                      "$ref": "#/components/schemas/dsmvlog_EELogItem.Mask.Reference.Details_WithCEStamp"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "BAD REQUEST. The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "My message"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "UNAUTHORIZED. The request requires user authentication. The response MUST include a WWW-Authenticate header field containing a challenge applicable to the requested resource. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials. If the 401 response contains the same challenge as the prior response, and the user agent has already attempted authentication at least once, then the user SHOULD be presented the entity that was given in the response, since that entity might include relevant diagnostic information. HTTP access authentication is explained in \"HTTP Authentication: Basic and Digest Access Authentication\".",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "My message"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "INTERNAL SERVER ERROR. A generic error message, given when an unexpected condition was encountered and no more specific message is suitable.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "example": "My message"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete an EE Logical Item",
        "description": "Delete an EE Logical Item",
        "operationId": "DELETE_dslogee:EELogItem_ID",
        "tags": [
          "dslogee:EELogItem"
        ],
        "parameters": [
          {
            "name": "SecurityContext",
            "in": "header",
            "description": "Role.Organization.CollabSpace value Ex:VPLMProjectLeader.MyCompany.Default",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ENO_CSRF_TOKEN",
            "in": "header",
            "description": "csrf token. You can get it from 3DSpace/resources/v1/application/CSRF",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ID",
            "in": "path",
            "description": "dslogee:EELogItem object ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK. The request has succeeded. The information returned with the response is dependent on the method used in the request, for example: GET an entity corresponding to the requested resource is sent in the response; HEAD the entity-header fields corresponding to the requested resource are sent in the response without any message-body; POST an entity describing or containing the result of the action; TRACE an entity containing the request message as received by the end server.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "My message"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "BAD REQUEST. The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "My message"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "UNAUTHORIZED. The request requires user authentication. The response MUST include a WWW-Authenticate header field containing a challenge applicable to the requested resource. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials. If the 401 response contains the same challenge as the prior response, and the user agent has already attempted authentication at least once, then the user SHOULD be presented the entity that was given in the response, since that entity might include relevant diagnostic information. HTTP access authentication is explained in \"HTTP Authentication: Basic and Digest Access Authentication\".",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "My message"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "FORBIDDEN. The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated. If the request method was not HEAD and the server wishes to make public why the request has not been fulfilled, it SHOULD describe the reason for the refusal in the entity. If the server does not wish to make this information available to the client, the status code 404 (Not Found) can be used instead.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 403
                    },
                    "message": {
                      "type": "string",
                      "example": "My message"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "INTERNAL SERVER ERROR. A generic error message, given when an unexpected condition was encountered and no more specific message is suitable.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "example": "My message"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/resources/v1/modeler/dslogee/dslogee:EELogItem": {
      "post": {
        "summary": "Create EE logical items",
        "description": "Create EE logical items",
        "operationId": "dslogee:EELogItem",
        "tags": [
          "dslogee:EELogItem"
        ],
        "parameters": [
          {
            "name": "SecurityContext",
            "in": "header",
            "description": "Role.Organization.CollabSpace value Ex:VPLMProjectLeader.MyCompany.Default",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ENO_CSRF_TOKEN",
            "in": "header",
            "description": "csrf token. You can get it from 3DSpace/resources/v1/application/CSRF",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "$mva",
            "description": "Multi Valuated Attributes support. Default mva value is : false",
            "required": false,
            "schema": {
              "type": "boolean",
              "enum": [
                "true",
                "false"
              ]
            }
          },
          {
            "in": "query",
            "name": "$mask",
            "description": "Mask defining what will be returned. Default Mask is:dskern:Mask.Default",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "dskern:Mask.Default",
                "dsmvlog:LogItem.Mask.Reference.Details",
                "dsmvlogee:EELogItem.Mask.Reference.Details"
              ]
            }
          },
          {
            "in": "query",
            "name": "$fields",
            "description": "We can add several fields with comma(,) separator to get in the response.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "dsmveno:SupportedTypes",
                "dsmveno:CustomerAttributes"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createLogicalReferences"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Request successful.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/dsmveno_DefaultBusMask.public_WithCEStamp"
                    },
                    {
                      "$ref": "#/components/schemas/dsmvlog_EELogItem.Mask.Reference.Details_WithCEStamp"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "BAD REQUEST. The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "My message"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "UNAUTHORIZED. The request requires user authentication. The response MUST include a WWW-Authenticate header field containing a challenge applicable to the requested resource. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials. If the 401 response contains the same challenge as the prior response, and the user agent has already attempted authentication at least once, then the user SHOULD be presented the entity that was given in the response, since that entity might include relevant diagnostic information. HTTP access authentication is explained in \"HTTP Authentication: Basic and Digest Access Authentication\".",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "My message"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "FORBIDDEN. The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated. If the request method was not HEAD and the server wishes to make public why the request has not been fulfilled, it SHOULD describe the reason for the refusal in the entity. If the server does not wish to make this information available to the client, the status code 404 (Not Found) can be used instead.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 403
                    },
                    "message": {
                      "type": "string",
                      "example": "My message"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "INTERNAL SERVER ERROR. A generic error message, given when an unexpected condition was encountered and no more specific message is suitable.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "example": "My message"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/resources/v1/modeler/dslogee/dslogee:EELogItem/search": {
      "get": {
        "summary": "Gets a list of EE Logical Items from indexed search ",
        "description": "Gets a list of EE Logical Items. By default, returns a total of up to 50 items, can be optionally increased up to 1000 items using $top query parameter. Recommandation: Use $searchStr query parameter with a minimum of two characters for better performances.",
        "operationId": "GETSearch_dslogee:EELogItem_Search",
        "tags": [
          "dslogee:EELogItem"
        ],
        "parameters": [
          {
            "name": "SecurityContext",
            "in": "header",
            "description": "Role.Organization.CollabSpace value Ex:VPLMProjectLeader.MyCompany.Default",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$searchStr",
            "in": "query",
            "description": "A search text to find one or more items.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "$mask",
            "description": "Mask defining what will be returned. Default Mask is:dskern:Mask.Default",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "dskern:Mask.Default",
                "dsmvlog:LogItem.Mask.Reference.Details",
                "dsmvlogee:LogItem.Mask.Reference.Details"
              ]
            }
          },
          {
            "in": "query",
            "name": "$fields",
            "description": "We can add several fields with comma(,) separator to get in the response.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "dsmveno:SupportedTypes",
                "dsmveno:CustomerAttributes"
              ]
            }
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Represents the total number of items returned from the search, accepts a maximum value of 1000.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Represents the number of items to skip (to be used along with $top query parameter)",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/dsmveno_DefaultBusMask.public_WithCEStamp"
                    },
                    {
                      "$ref": "#/components/schemas/dsmvlog_EELogItem.Mask.Reference.Details_WithCEStamp"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "BAD REQUEST. The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "My message"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "UNAUTHORIZED. The request requires user authentication. The response MUST include a WWW-Authenticate header field containing a challenge applicable to the requested resource. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials. If the 401 response contains the same challenge as the prior response, and the user agent has already attempted authentication at least once, then the user SHOULD be presented the entity that was given in the response, since that entity might include relevant diagnostic information. HTTP access authentication is explained in \"HTTP Authentication: Basic and Digest Access Authentication\".",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "My message"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "INTERNAL SERVER ERROR. A generic error message, given when an unexpected condition was encountered and no more specific message is suitable.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "example": "My message"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "dslogee_EELogItemEnterpriseAttributes": {
        "properties": {
          "LogicalReference_MyDBAttr4": {
            "description": "Attribute DB Value",
            "type": "string",
            "example": "Attribute DB Value"
          },
          "LogicalReference_MyMVA_string_DBAttr": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Multi Valuated Attribute string with $mva parameter set to true",
            "example": [
              "Copenhagen",
              "Helsinki",
              "Stockholm"
            ]
          },
          "LogicalReference_MyMVA_integer_DBAttr": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "Multi Valuated Attribute integer with $mva parameter set to true",
            "example": [
              2,
              4,
              6
            ]
          }
        }
      },
      "dslogee_EELogItem": {
        "required": [
          "title"
        ],
        "properties": {
          "title": {
            "type": "string",
            "example": "My title"
          },
          "description": {
            "type": "string",
            "example": "My description"
          },
          "customerAttributes": {
            "type": "object",
            "properties": {
              "DBCustomType.MyDBAttr1": {
                "description": "Attribute DB Value",
                "type": "string",
                "example": "Attribute DB Value"
              },
              "DBCustomType.MyMVA_string_DBAttr": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Multi Valuated Attribute string with $mva parameter set to true",
                "example": [
                  "Paris",
                  "London",
                  "Berlin"
                ]
              },
              "DBCustomType.MyMVA_integer_DBAttr": {
                "type": "array",
                "items": {
                  "type": "integer"
                },
                "description": "Multi Valuated Attribute integer with $mva parameter set to true",
                "example": [
                  5,
                  12,
                  24
                ]
              },
              "DBcustomExtension": {
                "properties": {
                  "DBcustomExtension.MyDBAttr2": {
                    "description": "Attribute DB Value",
                    "type": "string",
                    "example": "Attribute DB Value"
                  }
                }
              },
              "DBcustomAttributesGroup": {
                "properties": {
                  "DBcustomAttributesGroup.MyDBAttr3": {
                    "description": "Attribute DB Value",
                    "type": "string",
                    "example": "Attribute DB Value"
                  }
                }
              }
            }
          },
          "dslogee:EELogItemEnterpriseAttributes": {
            "$ref": "#/components/schemas/dslogee_EELogItemEnterpriseAttributes"
          }
        }
      },
      "dslogee_EELogItem_PATCH": {
        "required": [
          "cestamp"
        ],
        "properties": {
          "title": {
            "type": "string",
            "example": "My title"
          },
          "description": {
            "type": "string",
            "example": "My description"
          },
          "cestamp": {
            "type": "string",
            "example": "Timestamp id"
          },
          "customerAttributes": {
            "type": "object",
            "properties": {
              "DBCustomType.MyDBAttr1": {
                "description": "Attribute DB Value",
                "type": "string",
                "example": "Attribute DB Value"
              },
              "DBCustomType.MyMVA_string_DBAttr": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Multi Valuated Attribute string with $mva parameter set to true",
                "example": [
                  "Paris",
                  "London",
                  "Berlin"
                ]
              },
              "DBCustomType.MyMVA_integer_DBAttr": {
                "type": "array",
                "items": {
                  "type": "integer"
                },
                "description": "Multi Valuated Attribute integer with $mva parameter set to true",
                "example": [
                  5,
                  12,
                  24
                ]
              },
              "DBcustomExtension": {
                "properties": {
                  "DBcustomExtension.MyDBAttr2": {
                    "description": "Attribute DB Value",
                    "type": "string",
                    "example": "Attribute DB Value"
                  }
                }
              },
              "DBcustomAttributesGroup": {
                "properties": {
                  "DBcustomAttributesGroup.MyDBAttr3": {
                    "description": "Attribute DB Value",
                    "type": "string",
                    "example": "Attribute DB Value"
                  }
                }
              }
            }
          },
          "dslogee:EELogItemEnterpriseAttributes": {
            "$ref": "#/components/schemas/dslogee_EELogItemEnterpriseAttributes"
          }
        }
      },
      "dslogee_EELogInstance": {
        "properties": {
          "name": {
            "type": "string",
            "example": "My name"
          },
          "description": {
            "type": "string",
            "example": "My description"
          },
          "customerAttributes": {
            "type": "object",
            "properties": {
              "DBCustomType.MyDBAttr1": {
                "description": "Attribute DB Value",
                "type": "string",
                "example": "Attribute DB Value"
              },
              "DBCustomType.MyMVA_string_DBAttr": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Multi Valuated Attribute string with $mva parameter set to true",
                "example": [
                  "Paris",
                  "London",
                  "Berlin"
                ]
              },
              "DBCustomType.MyMVA_integer_DBAttr": {
                "type": "array",
                "items": {
                  "type": "integer"
                },
                "description": "Multi Valuated Attribute integer with $mva parameter set to true",
                "example": [
                  5,
                  12,
                  24
                ]
              },
              "DBcustomExtension": {
                "properties": {
                  "DBcustomExtension.MyDBAttr2": {
                    "description": "Attribute DB Value",
                    "type": "string",
                    "example": "Attribute DB Value"
                  }
                }
              },
              "DBcustomAttributesGroup": {
                "properties": {
                  "DBcustomAttributesGroup.MyDBAttr3": {
                    "description": "Attribute DB Value",
                    "type": "string",
                    "example": "Attribute DB Value"
                  }
                }
              }
            }
          }
        }
      },
      "dslogee_EELogInstance_PATCH": {
        "required": [
          "cestamp"
        ],
        "properties": {
          "name": {
            "type": "string",
            "example": "My name"
          },
          "description": {
            "type": "string",
            "example": "My description"
          },
          "cestamp": {
            "type": "string",
            "example": "Timestamp id"
          },
          "customerAttributes": {
            "type": "object",
            "properties": {
              "DBCustomType.MyDBAttr1": {
                "description": "Attribute DB Value",
                "type": "string",
                "example": "Attribute DB Value"
              },
              "DBCustomType.MyMVA_string_DBAttr": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Multi Valuated Attribute string with $mva parameter set to true",
                "example": [
                  "Paris",
                  "London",
                  "Berlin"
                ]
              },
              "DBCustomType.MyMVA_integer_DBAttr": {
                "type": "array",
                "items": {
                  "type": "integer"
                },
                "description": "Multi Valuated Attribute integer with $mva parameter set to true",
                "example": [
                  5,
                  12,
                  24
                ]
              },
              "DBcustomExtension": {
                "properties": {
                  "DBcustomExtension.MyDBAttr2": {
                    "description": "Attribute DB Value",
                    "type": "string",
                    "example": "Attribute DB Value"
                  }
                }
              },
              "DBcustomAttributesGroup": {
                "properties": {
                  "DBcustomAttributesGroup.MyDBAttr3": {
                    "description": "Attribute DB Value",
                    "type": "string",
                    "example": "Attribute DB Value"
                  }
                }
              }
            }
          }
        }
      },
      "deleteEELogicalInstances": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "example": [
          "Instance ID1",
          "Instance ID2"
        ]
      },
      "createEELogicalInstances": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/createEELogicalInstances_referencedObject"
          },
          {
            "$ref": "#/components/schemas/createEELogicalInstances_referencedItem"
          }
        ]
      },
      "replaceEELogicalInstance_RefObject": {
        "required": [
          "referencedObject"
        ],
        "type": "object",
        "properties": {
          "referencedObject": {
            "required": [
              "source",
              "type",
              "identifier",
              "relativePath"
            ],
            "type": "object",
            "properties": {
              "source": {
                "type": "string",
                "example": "$3DSpace"
              },
              "type": {
                "type": "string",
                "example": "dslogee:EELogItem"
              },
              "identifier": {
                "type": "string",
                "example": "FE562168015FFCF14F940A513C63AA88"
              },
              "relativePath": {
                "type": "string",
                "example": "/resources/v1/modeler/dslogee/dslogee:EELogItem/FE562168015FFCF14F940A513C63AA88"
              }
            }
          }
        }
      },
      "createLogicalReferences": {
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "example": "customType",
                  "description": "RFLVPMLogicalReference or one of its direct custom specialization sub-types"
                },
                "attributes": {
                  "$ref": "#/components/schemas/dslogee_EELogItem"
                }
              }
            }
          }
        }
      },
      "dsmvlog_EELogItem.Mask.Reference.Details": {
        "properties": {
          "totalItems": {
            "type": "integer",
            "example": 1
          },
          "member": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "description": "Reference name",
                  "type": "string",
                  "example": "My name"
                },
                "title": {
                  "description": "Reference object title value",
                  "type": "string",
                  "example": "My title"
                },
                "description": {
                  "description": "Reference description value",
                  "type": "string",
                  "example": "My description"
                },
                "id": {
                  "description": "Entity physical id",
                  "type": "string",
                  "example": "EE562168015FFCF14F940A513C63AA77"
                },
                "type": {
                  "description": "Basic type value",
                  "type": "string",
                  "example": "DBType"
                },
                "modified": {
                  "description": "Basic modified value",
                  "type": "string",
                  "example": "10/19/2021 10:58:01 PM"
                },
                "created": {
                  "description": "Object created value",
                  "type": "string",
                  "example": "10/19/2021 10:58:01 PM"
                },
                "revision": {
                  "description": "Object revision value",
                  "type": "string",
                  "example": "A.1"
                },
                "state": {
                  "description": "Object current state value",
                  "type": "string",
                  "example": "IN_WORK"
                },
                "owner": {
                  "description": "Object owner value",
                  "type": "string",
                  "example": "DB Owner"
                },
                "organization": {
                  "description": "Object organization value",
                  "type": "string",
                  "example": "MyCompany"
                },
                "collabspace": {
                  "description": "Object collabspace value",
                  "type": "string",
                  "example": "Default"
                },
                "dslogee:EELogItemEnterpriseAttributes": {
                  "properties": {
                    "XP_RFLVPMLogicalReference_Ext.MyDBAttr1": {
                      "description": "Attribute DB Value",
                      "type": "string",
                      "example": "Attribute DB Value"
                    },
                    "XP_RFLVPMFunctionalReference_Ext.MyMVA_string_DBAttr": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Multi Valuated Attribute string with $mva parameter set to true",
                      "example": [
                        "Copenhagen",
                        "Helsinki",
                        "Stockholm"
                      ]
                    },
                    "XP_RFLVPMFunctionalReference_Ext.MyMVA_integer_DBAttr": {
                      "type": "array",
                      "items": {
                        "type": "integer"
                      },
                      "description": "Multi Valuated Attribute integer with $mva parameter set to true",
                      "example": [
                        2,
                        4,
                        6
                      ]
                    }
                  }
                }
              }
            }
          },
          "nlsLabel": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "example": "My Id translated value"
              },
              "type": {
                "type": "string",
                "example": "My Type translated value"
              },
              "modified": {
                "type": "string",
                "example": "My Modification Date translated value"
              },
              "created": {
                "type": "string",
                "example": "My Creation Date translated value"
              },
              "revision": {
                "type": "string",
                "example": "My Revision translated value"
              },
              "state": {
                "type": "string",
                "example": "My State translated value"
              },
              "owner": {
                "type": "string",
                "example": "My Owner translated value"
              }
            }
          }
        }
      },
      "dsmvlog_EELogItem.Mask.Reference.Details_WithCEStamp": {
        "properties": {
          "totalItems": {
            "type": "integer",
            "example": 1
          },
          "member": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "description": "Reference name",
                  "type": "string",
                  "example": "My name"
                },
                "title": {
                  "description": "Reference object title value",
                  "type": "string",
                  "example": "My title"
                },
                "description": {
                  "description": "Reference description value",
                  "type": "string",
                  "example": "My description"
                },
                "id": {
                  "description": "Entity physical id",
                  "type": "string",
                  "example": "EE562168015FFCF14F940A513C63AA77"
                },
                "type": {
                  "description": "Basic type value",
                  "type": "string",
                  "example": "DBType"
                },
                "modified": {
                  "description": "Basic modified value",
                  "type": "string",
                  "example": "10/19/2021 10:58:01 PM"
                },
                "created": {
                  "description": "Object created value",
                  "type": "string",
                  "example": "10/19/2021 10:58:01 PM"
                },
                "revision": {
                  "description": "Object revision value",
                  "type": "string",
                  "example": "A.1"
                },
                "state": {
                  "description": "Object current state value",
                  "type": "string",
                  "example": "IN_WORK"
                },
                "owner": {
                  "description": "Object owner value",
                  "type": "string",
                  "example": "DB Owner"
                },
                "organization": {
                  "description": "Object organization value",
                  "type": "string",
                  "example": "MyCompany"
                },
                "collabspace": {
                  "description": "Object collabspace value",
                  "type": "string",
                  "example": "Default"
                },
                "dslogee:EELogItemEnterpriseAttributes": {
                  "properties": {
                    "XP_RFLVPMLogicalReference_Ext.MyDBAttr1": {
                      "description": "Attribute DB Value",
                      "type": "string",
                      "example": "Attribute DB Value"
                    },
                    "XP_RFLVPMFunctionalReference_Ext.MyMVA_string_DBAttr": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Multi Valuated Attribute string with $mva parameter set to true",
                      "example": [
                        "Copenhagen",
                        "Helsinki",
                        "Stockholm"
                      ]
                    },
                    "XP_RFLVPMFunctionalReference_Ext.MyMVA_integer_DBAttr": {
                      "type": "array",
                      "items": {
                        "type": "integer"
                      },
                      "description": "Multi Valuated Attribute integer with $mva parameter set to true",
                      "example": [
                        2,
                        4,
                        6
                      ]
                    }
                  }
                },
                "cestamp": {
                  "description": "Object cestamp value",
                  "type": "string",
                  "example": "2D70169432D84866A200F907881AC9B1"
                }
              }
            }
          },
          "nlsLabel": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "example": "My Id translated value"
              },
              "type": {
                "type": "string",
                "example": "My Type translated value"
              },
              "modified": {
                "type": "string",
                "example": "My Modification Date translated value"
              },
              "created": {
                "type": "string",
                "example": "My Creation Date translated value"
              },
              "revision": {
                "type": "string",
                "example": "My Revision translated value"
              },
              "state": {
                "type": "string",
                "example": "My State translated value"
              },
              "owner": {
                "type": "string",
                "example": "My Owner translated value"
              }
            }
          }
        }
      },
      "dsmvlog_EELogInstance.Mask.Instance.Details": {
        "properties": {
          "totalItems": {
            "type": "integer",
            "example": 1
          },
          "member": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "description": "Entity physical id",
                  "type": "string",
                  "example": "EE562168015FFCF14F940A513C63AA77"
                },
                "type": {
                  "description": "Basic type value",
                  "type": "string",
                  "example": "DBType"
                },
                "modified": {
                  "description": "Basic modified value",
                  "type": "string",
                  "example": "10/19/2021 10:58:01 PM"
                },
                "created": {
                  "description": "Object created value",
                  "type": "string",
                  "example": "10/19/2021 10:58:01 PM"
                },
                "name": {
                  "description": "Instance name",
                  "type": "string",
                  "example": "My name"
                },
                "description": {
                  "description": "Instance description vlaue",
                  "type": "string",
                  "example": "My description"
                },
                "referencedObject": {
                  "$ref": "#/components/schemas/response_referencedObject"
                }
              }
            }
          },
          "nlsLabel": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "example": "My Id translated value"
              },
              "type": {
                "type": "string",
                "example": "My Type translated value"
              },
              "modified": {
                "type": "string",
                "example": "My Modification Date translated value"
              },
              "created": {
                "type": "string",
                "example": "My Creation Date translated value"
              }
            }
          }
        }
      },
      "dsmvlog_EELogInstance.Mask.Instance.Details_WithCEStamp": {
        "properties": {
          "totalItems": {
            "type": "integer",
            "example": 1
          },
          "member": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "description": "Entity physical id",
                  "type": "string",
                  "example": "EE562168015FFCF14F940A513C63AA77"
                },
                "type": {
                  "description": "Basic type value",
                  "type": "string",
                  "example": "DBType"
                },
                "modified": {
                  "description": "Basic modified value",
                  "type": "string",
                  "example": "10/19/2021 10:58:01 PM"
                },
                "created": {
                  "description": "Object created value",
                  "type": "string",
                  "example": "10/19/2021 10:58:01 PM"
                },
                "name": {
                  "description": "Instance name",
                  "type": "string",
                  "example": "My name"
                },
                "description": {
                  "description": "Instance description vlaue",
                  "type": "string",
                  "example": "My description"
                },
                "referencedObject": {
                  "$ref": "#/components/schemas/response_referencedObject"
                },
                "cestamp": {
                  "description": "Object cestamp value",
                  "type": "string",
                  "example": "2D70169432D84866A200F907881AC9B1"
                }
              }
            }
          },
          "nlsLabel": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "example": "My Id translated value"
              },
              "type": {
                "type": "string",
                "example": "My Type translated value"
              },
              "modified": {
                "type": "string",
                "example": "My Modification Date translated value"
              },
              "created": {
                "type": "string",
                "example": "My Creation Date translated value"
              }
            }
          }
        }
      },
      "dsmveno_DefaultBusMask.public": {
        "properties": {
          "totalItems": {
            "type": "integer",
            "example": 1
          },
          "member": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "description": "Reference name",
                  "type": "string",
                  "example": "My name"
                },
                "title": {
                  "description": "Reference object title value",
                  "type": "string",
                  "example": "My title"
                },
                "description": {
                  "description": "Reference description value",
                  "type": "string",
                  "example": "My description"
                },
                "id": {
                  "description": "Entity physical id",
                  "type": "string",
                  "example": "EE562168015FFCF14F940A513C63AA77"
                },
                "type": {
                  "description": "Basic type value",
                  "type": "string",
                  "example": "DBType"
                },
                "modified": {
                  "description": "Basic modified value",
                  "type": "string",
                  "example": "10/19/2021 10:58:01 PM"
                },
                "created": {
                  "description": "Object created value",
                  "type": "string",
                  "example": "10/19/2021 10:58:01 PM"
                },
                "revision": {
                  "description": "Object revision value",
                  "type": "string",
                  "example": "A.1"
                },
                "state": {
                  "description": "Object current state value",
                  "type": "string",
                  "example": "IN_WORK"
                },
                "owner": {
                  "description": "Object owner value",
                  "type": "string",
                  "example": "DB Owner"
                },
                "organization": {
                  "description": "Object organization value",
                  "type": "string",
                  "example": "MyCompany"
                },
                "collabspace": {
                  "description": "Object collabspace value",
                  "type": "string",
                  "example": "Default"
                }
              }
            }
          },
          "nlsLabel": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "example": "My Id translated value"
              },
              "type": {
                "type": "string",
                "example": "My Type translated value"
              },
              "modified": {
                "type": "string",
                "example": "My Modification Date translated value"
              },
              "created": {
                "type": "string",
                "example": "My Creation Date translated value"
              },
              "revision": {
                "type": "string",
                "example": "My Revision translated value"
              },
              "state": {
                "type": "string",
                "example": "My State translated value"
              },
              "owner": {
                "type": "string",
                "example": "My Owner translated value"
              }
            }
          }
        }
      },
      "dsmveno_DefaultBusMask.public_WithCEStamp": {
        "properties": {
          "totalItems": {
            "type": "integer",
            "example": 1
          },
          "member": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "description": "Reference name",
                  "type": "string",
                  "example": "My name"
                },
                "title": {
                  "description": "Reference object title value",
                  "type": "string",
                  "example": "My title"
                },
                "description": {
                  "description": "Reference description value",
                  "type": "string",
                  "example": "My description"
                },
                "id": {
                  "description": "Entity physical id",
                  "type": "string",
                  "example": "EE562168015FFCF14F940A513C63AA77"
                },
                "type": {
                  "description": "Basic type value",
                  "type": "string",
                  "example": "DBType"
                },
                "modified": {
                  "description": "Basic modified value",
                  "type": "string",
                  "example": "10/19/2021 10:58:01 PM"
                },
                "created": {
                  "description": "Object created value",
                  "type": "string",
                  "example": "10/19/2021 10:58:01 PM"
                },
                "revision": {
                  "description": "Object revision value",
                  "type": "string",
                  "example": "A.1"
                },
                "state": {
                  "description": "Object current state value",
                  "type": "string",
                  "example": "IN_WORK"
                },
                "owner": {
                  "description": "Object owner value",
                  "type": "string",
                  "example": "DB Owner"
                },
                "organization": {
                  "description": "Object organization value",
                  "type": "string",
                  "example": "MyCompany"
                },
                "collabspace": {
                  "description": "Object collabspace value",
                  "type": "string",
                  "example": "Default"
                },
                "cestamp": {
                  "description": "Object cestamp value",
                  "type": "string",
                  "example": "2D70169432D84866A200F907881AC9B1"
                }
              }
            }
          },
          "nlsLabel": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "example": "My Id translated value"
              },
              "type": {
                "type": "string",
                "example": "My Type translated value"
              },
              "modified": {
                "type": "string",
                "example": "My Modification Date translated value"
              },
              "created": {
                "type": "string",
                "example": "My Creation Date translated value"
              },
              "revision": {
                "type": "string",
                "example": "My Revision translated value"
              },
              "state": {
                "type": "string",
                "example": "My State translated value"
              },
              "owner": {
                "type": "string",
                "example": "My Owner translated value"
              }
            }
          }
        }
      },
      "dsmveno_DefaultRelMask.public": {
        "properties": {
          "totalItems": {
            "type": "integer",
            "example": 1
          },
          "member": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "description": "Entity physical id",
                  "type": "string",
                  "example": "EE562168015FFCF14F940A513C63AA77"
                },
                "type": {
                  "description": "Basic type value",
                  "type": "string",
                  "example": "DBType"
                },
                "modified": {
                  "description": "Basic modified value",
                  "type": "string",
                  "example": "10/19/2021 10:58:01 PM"
                },
                "created": {
                  "description": "Object created value",
                  "type": "string",
                  "example": "10/19/2021 10:58:01 PM"
                },
                "name": {
                  "description": "Instance name",
                  "type": "string",
                  "example": "My name"
                },
                "description": {
                  "description": "Instance description vlaue",
                  "type": "string",
                  "example": "My description"
                }
              }
            }
          },
          "nlsLabel": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "example": "My Id translated value"
              },
              "type": {
                "type": "string",
                "example": "My Type translated value"
              },
              "modified": {
                "type": "string",
                "example": "My Modification Date translated value"
              },
              "created": {
                "type": "string",
                "example": "My Creation Date translated value"
              }
            }
          }
        }
      },
      "dsmveno_DefaultRelMask.public_WithCEStamp": {
        "properties": {
          "totalItems": {
            "type": "integer",
            "example": 1
          },
          "member": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "description": "Entity physical id",
                  "type": "string",
                  "example": "EE562168015FFCF14F940A513C63AA77"
                },
                "type": {
                  "description": "Basic type value",
                  "type": "string",
                  "example": "DBType"
                },
                "modified": {
                  "description": "Basic modified value",
                  "type": "string",
                  "example": "10/19/2021 10:58:01 PM"
                },
                "created": {
                  "description": "Object created value",
                  "type": "string",
                  "example": "10/19/2021 10:58:01 PM"
                },
                "name": {
                  "description": "Instance name",
                  "type": "string",
                  "example": "My name"
                },
                "description": {
                  "description": "Instance description vlaue",
                  "type": "string",
                  "example": "My description"
                },
                "cestamp": {
                  "description": "Object cestamp value",
                  "type": "string",
                  "example": "2D70169432D84866A200F907881AC9B1"
                }
              }
            }
          },
          "nlsLabel": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "example": "My Id translated value"
              },
              "type": {
                "type": "string",
                "example": "My Type translated value"
              },
              "modified": {
                "type": "string",
                "example": "My Modification Date translated value"
              },
              "created": {
                "type": "string",
                "example": "My Creation Date translated value"
              }
            }
          }
        }
      },
      "dsmveno_DefaultExtensionMask.public": {
        "properties": {
          "totalItems": {
            "type": "integer",
            "example": 1
          },
          "member": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "modified": {
                  "description": "Basic modified value",
                  "type": "string",
                  "example": "10/19/2021 10:58:01 PM"
                },
                "created": {
                  "description": "Object created value",
                  "type": "string",
                  "example": "10/19/2021 10:58:01 PM"
                }
              }
            }
          },
          "nlsLabel": {
            "type": "object",
            "properties": {
              "modified": {
                "type": "string",
                "example": "My Modification Date translated value"
              },
              "created": {
                "type": "string",
                "example": "My Creation Date translated value"
              }
            }
          }
        }
      },
      "dsmveno_DefaultExtensionMask.public_WithCEStamp": {
        "properties": {
          "totalItems": {
            "type": "integer",
            "example": 1
          },
          "member": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "modified": {
                  "description": "Basic modified value",
                  "type": "string",
                  "example": "10/19/2021 10:58:01 PM"
                },
                "created": {
                  "description": "Object created value",
                  "type": "string",
                  "example": "10/19/2021 10:58:01 PM"
                },
                "cestamp": {
                  "description": "Object cestamp value",
                  "type": "string",
                  "example": "2D70169432D84866A200F907881AC9B1"
                }
              }
            }
          },
          "nlsLabel": {
            "type": "object",
            "properties": {
              "modified": {
                "type": "string",
                "example": "My Modification Date translated value"
              },
              "created": {
                "type": "string",
                "example": "My Creation Date translated value"
              }
            }
          }
        }
      },
      "createEELogicalInstances_referencedItem": {
        "properties": {
          "instances": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "example": "customType",
                  "description": "RFLVPMLogicalReference or one of its direct custom specialization sub-types"
                },
                "attributes": {
                  "$ref": "#/components/schemas/dslogee_EELogInstance"
                },
                "referencedItem": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "example": "My type"
                    },
                    "attributes": {
                      "$ref": "#/components/schemas/dslogee_EELogItem"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "createEELogicalInstances_referencedObject": {
        "properties": {
          "instances": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "example": "customType"
                },
                "attributes": {
                  "$ref": "#/components/schemas/dslogee_EELogInstance"
                },
                "referencedObject": {
                  "$ref": "#/components/schemas/payload_referencedObject"
                }
              }
            }
          }
        }
      },
      "payload_referencedObject": {
        "required": [
          "source",
          "type",
          "identifier",
          "relativePath"
        ],
        "type": "object",
        "properties": {
          "source": {
            "type": "string",
            "example": "https://ServerName/3DSpace"
          },
          "type": {
            "type": "string",
            "example": "dslogee:EELogItem"
          },
          "identifier": {
            "type": "string",
            "example": "EE562168015FFCF14F940A513C63AA77"
          },
          "relativePath": {
            "type": "string",
            "example": "/resources/v1/dslogee/dslogee:EELogItem/EE562168015FFCF14F940A513C63AA77"
          }
        }
      },
      "response_referencedObject": {
        "type": "object",
        "properties": {
          "source": {
            "type": "string",
            "example": "https://ServerName/3DSpace"
          },
          "type": {
            "type": "string",
            "example": "dslogee:EELogItem"
          },
          "identifier": {
            "type": "string",
            "example": "EE562168015FFCF14F940A513C63AA77"
          },
          "relativePath": {
            "type": "string",
            "example": "/resources/v1/dslogee/dslogee:EELogItem/EE562168015FFCF14F940A513C63AA77"
          }
        }
      },
      "dscfg_Configured": {
        "properties": {}
      },
      "dscfg_Configured_PATCH": {
        "properties": {
          "enabledCriteria": {
            "example": [
              "ModelVersion",
              "Variant"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "dslc_changeControl": {},
      "dslc_changeControl_PATCH": {},
      "dsmvcfg_FilterableDetails": {
        "properties": {
          "totalItems": {
            "type": "integer",
            "example": 1
          },
          "member": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "effectivityContent": {
                  "description": "Get the effectivity expression on instance.",
                  "type": "object",
                  "properties": {
                    "Effectivity_Variant": {
                      "type": "string",
                      "example": ""
                    },
                    "Effectivity_Projected_Evolution": {
                      "type": "string",
                      "example": "Aircraft: Model version Aircraft-B&lt; "
                    },
                    "Effectivity_Current_Evolution": {
                      "type": "string",
                      "example": "Aircraft: Model version Aircraft-B&lt;"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "dsmvcfg_FilterableDetails_WithCEStamp": {
        "properties": {
          "totalItems": {
            "type": "integer",
            "example": 1
          },
          "member": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "effectivityContent": {
                  "description": "Get the effectivity expression on instance.",
                  "type": "string",
                  "example": "classReturnType is not proper. Please check the computed program return type"
                },
                "cestamp": {
                  "description": "Object cestamp value",
                  "type": "string",
                  "example": "2D70169432D84866A200F907881AC9B1"
                }
              }
            }
          }
        }
      },
      "dsmvcfg_attribute.effectivityContent": {
        "properties": {
          "totalItems": {
            "type": "integer",
            "example": 1
          },
          "member": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "effectivityContent": {
                  "description": "Get the effectivity expression on instance.",
                  "type": "string",
                  "example": "classReturnType is not proper. Please check the computed program return type"
                }
              }
            }
          }
        }
      },
      "dsmvcfg_attribute.hasEffectivity": {
        "properties": {
          "totalItems": {
            "type": "integer",
            "example": 1
          },
          "member": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "hasEffectivity": {
                  "description": "Check if the Instance or Relationship is having effectivity on it or not.",
                  "type": "string",
                  "example": "TRUE or FALSE"
                }
              }
            }
          }
        }
      },
      "dsmvcfg_attribute.hasChange": {
        "properties": {
          "totalItems": {
            "type": "integer",
            "example": 1
          },
          "member": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "hasChange": {
                  "description": "Check if the Change Action or Work Under Change is available.",
                  "type": "string",
                  "example": "true or false"
                }
              }
            }
          }
        }
      },
      "dsmvcfg_attribute.enabledCriteria": {
        "properties": {
          "totalItems": {
            "type": "integer",
            "example": 1
          },
          "member": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "enabledCriteria": {
                  "description": "Get the list of Enabled Criteria on Configured Object",
                  "type": "string",
                  "example": "classReturnType is not proper. Please check the computed program return type"
                }
              }
            }
          }
        }
      },
      "dsmvcfg_attribute.configurationCtxt": {
        "properties": {
          "totalItems": {
            "type": "integer",
            "example": 1
          },
          "member": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "configurationCtxt": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "description": "object name",
                      "type": "string",
                      "example": "My name"
                    },
                    "title": {
                      "description": "Object Title value",
                      "type": "string",
                      "example": "My title"
                    },
                    "description": {
                      "description": "Object description value",
                      "type": "string",
                      "example": "My description"
                    },
                    "id": {
                      "description": "Entity physical id",
                      "type": "string",
                      "example": "EE562168015FFCF14F940A513C63AA77"
                    },
                    "type": {
                      "description": "Basic type value",
                      "type": "string",
                      "example": "DBType"
                    },
                    "modified": {
                      "description": "Basic modified value",
                      "type": "string",
                      "example": "Dec 15, 2017 11:17 PM"
                    },
                    "created": {
                      "description": "Object created value",
                      "type": "string",
                      "example": "Dec 11, 2017 12:53 PM"
                    },
                    "revision": {
                      "description": "Object revision value",
                      "type": "string",
                      "example": "A.1"
                    },
                    "state": {
                      "description": "Object current state value",
                      "type": "string",
                      "example": "IN_WORK"
                    },
                    "owner": {
                      "description": "Object owner value",
                      "type": "string",
                      "example": "John Doe"
                    },
                    "organization": {
                      "description": "Object organization value",
                      "type": "string",
                      "example": "MyCompany"
                    },
                    "collabspace": {
                      "description": "Object collabspace value",
                      "type": "string",
                      "example": "Default"
                    },
                    "source": {
                      "description": "computed property",
                      "type": "string",
                      "example": "String"
                    },
                    "identifier": {
                      "description": "Entity physical id",
                      "type": "string",
                      "example": "EE562168015FFCF14F940A513C63AA77"
                    },
                    "relativePath": {
                      "description": "computed property",
                      "type": "string",
                      "example": "String"
                    }
                  }
                }
              }
            }
          },
          "nlsLabel": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "example": "My Name translated value"
              },
              "title": {
                "type": "string",
                "example": "My Title translated value"
              },
              "description": {
                "type": "string",
                "example": "My Description translated value"
              },
              "id": {
                "type": "string",
                "example": "My Id translated value"
              },
              "type": {
                "type": "string",
                "example": "My Type translated value"
              },
              "modified": {
                "type": "string",
                "example": "My Modification Date translated value"
              },
              "created": {
                "type": "string",
                "example": "My Creation Date translated value"
              },
              "revision": {
                "type": "string",
                "example": "My Revision translated value"
              },
              "state": {
                "type": "string",
                "example": "My State translated value"
              },
              "owner": {
                "type": "string",
                "example": "My Owner translated value"
              },
              "source": {
                "type": "string",
                "example": "My Source translated value"
              },
              "identifier": {
                "type": "string",
                "example": "My Identifier translated value"
              },
              "relativePath": {
                "type": "string",
                "example": "My RelativePath translated value"
              }
            }
          }
        }
      },
      "dsmvcfg_attribute.isConfigured": {
        "properties": {
          "totalItems": {
            "type": "integer",
            "example": 1
          },
          "member": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "isConfigured": {
                  "description": "Check if the object is Configured or not",
                  "type": "string",
                  "example": "dscfg:[{\"isConfigured\":\"true\"}]"
                }
              }
            }
          }
        }
      },
      "dsmvcfg_ConfiguredBasics": {
        "properties": {
          "totalItems": {
            "type": "integer",
            "example": 1
          },
          "member": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "enabledCriteria": {
                  "description": "Get the list of Enabled Criteria on Configured Object",
                  "type": "string",
                  "example": "classReturnType is not proper. Please check the computed program return type"
                }
              }
            }
          }
        }
      },
      "dsmvcfg_ConfiguredBasics_WithCEStamp": {
        "properties": {
          "totalItems": {
            "type": "integer",
            "example": 1
          },
          "member": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "enabledCriteria": {
                  "description": "Get the list of Enabled Criteria on Configured Object",
                  "type": "string",
                  "example": "classReturnType is not proper. Please check the computed program return type"
                },
                "cestamp": {
                  "description": "Object cestamp value",
                  "type": "string",
                  "example": "2D70169432D84866A200F907881AC9B1"
                }
              }
            }
          }
        }
      },
      "dsmvcfg_ConfiguredDetails": {
        "properties": {
          "totalItems": {
            "type": "integer",
            "example": 1
          },
          "member": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "enabledCriteria": {
                  "description": "Get the list of Enabled Criteria on Configured Object",
                  "type": "string",
                  "example": "[Variant,ModelVersion,Unit,ContextualDate,ManufacturingPlan]"
                },
                "configurationCtxt": {
                  "properties": {
                    "totalItems": {
                      "type": "integer",
                      "example": 1
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "description": "object name",
                            "type": "string",
                            "example": "MV-96136435-00000001"
                          },
                          "title": {
                            "description": "Object Title  value",
                            "type": "string",
                            "example": "Model 01"
                          },
                          "description": {
                            "description": "Object description value",
                            "type": "string",
                            "example": "My description"
                          },
                          "id": {
                            "description": "Entity physical id",
                            "type": "string",
                            "example": "698CAC5643FA270062C3051D0007C518"
                          },
                          "type": {
                            "description": "Basic type value",
                            "type": "string",
                            "example": "Model"
                          },
                          "modified": {
                            "description": "Basic modified value",
                            "type": "string",
                            "example": "Dec 15, 2017 11:17 PM"
                          },
                          "created": {
                            "description": "Object created value",
                            "type": "string",
                            "example": "Dec 11, 2017 12:53 PM"
                          },
                          "revision": {
                            "description": "Object revision value",
                            "type": "string",
                            "example": "A.1"
                          },
                          "state": {
                            "description": "Object current state value",
                            "type": "string",
                            "example": "In Work"
                          },
                          "owner": {
                            "description": "Object owner value",
                            "type": "string",
                            "example": "John Doe"
                          },
                          "organization": {
                            "description": "Object organization value",
                            "type": "string",
                            "example": "MyCompany"
                          },
                          "collabspace": {
                            "description": "Object collabspace value",
                            "type": "string",
                            "example": "Default"
                          },
                          "source": {
                            "description": "computed property",
                            "type": "string",
                            "example": "$3DSpace"
                          },
                          "identifier": {
                            "description": "Entity physical id",
                            "type": "string",
                            "example": "698CAC5643FA270062C3051D0007C518"
                          },
                          "relativePath": {
                            "description": "computed property",
                            "type": "string",
                            "example": "/resources/v1/modeler/dspfl/dspfl:Model/698CAC5643FA270062C3051D0007C518"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "nlsLabel": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "example": "My Name translated value"
              },
              "title": {
                "type": "string",
                "example": "My Title translated value"
              },
              "description": {
                "type": "string",
                "example": "My Description translated value"
              },
              "id": {
                "type": "string",
                "example": "My Id translated value"
              },
              "type": {
                "type": "string",
                "example": "My Type translated value"
              },
              "modified": {
                "type": "string",
                "example": "My Modification Date translated value"
              },
              "created": {
                "type": "string",
                "example": "My Creation Date translated value"
              },
              "revision": {
                "type": "string",
                "example": "My Revision translated value"
              },
              "state": {
                "type": "string",
                "example": "My State translated value"
              },
              "owner": {
                "type": "string",
                "example": "My Owner translated value"
              },
              "source": {
                "type": "string",
                "example": "My Source translated value"
              },
              "identifier": {
                "type": "string",
                "example": "My Identifier translated value"
              },
              "relativePath": {
                "type": "string",
                "example": "My RelativePath translated value"
              }
            }
          }
        }
      },
      "dsmvlc_ChangeControlMask.Status": {
        "properties": {
          "totalItems": {
            "type": "integer",
            "example": 1
          },
          "member": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "Change Control Status": {
                  "type": "string",
                  "example": "[NONE, ANY, ID OR MANY]"
                },
                "Controlling Changes": {
                  "type": "array",
                  "items": {
                    "properties": {
                      "source": {
                        "description": "source",
                        "type": "string",
                        "example": "https://ServerName:443/3DSpace"
                      },
                      "type": {
                        "description": "MetaType or DB Type",
                        "type": "string",
                        "example": "dsxxx:xxxItem / VPMReference"
                      },
                      "identifier": {
                        "description": "identifier value",
                        "type": "string",
                        "example": "CF446630000051C460123453E8123C"
                      },
                      "relativePath": {
                        "description": "Relative Path",
                        "type": "string",
                        "example": "/resources/v1/modeler/dsxxx/dsxxx:xxxItem/$id"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "dsmvlc_ChangeControlMask.Status_WithCEStamp": {
        "properties": {
          "totalItems": {
            "type": "integer",
            "example": 1
          },
          "member": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "Change Control Status": {
                  "type": "string",
                  "example": "[NONE, ANY, ID OR MANY]"
                },
                "Controlling Changes": {
                  "type": "array",
                  "items": {
                    "properties": {
                      "source": {
                        "description": "source",
                        "type": "string",
                        "example": "https://ServerName:443/3DSpace"
                      },
                      "type": {
                        "description": "MetaType or DB Type",
                        "type": "string",
                        "example": "dsxxx:xxxItem / VPMReference"
                      },
                      "identifier": {
                        "description": "identifier value",
                        "type": "string",
                        "example": "CF446630000051C460123453E8123C"
                      },
                      "relativePath": {
                        "description": "Relative Path",
                        "type": "string",
                        "example": "/resources/v1/modeler/dsxxx/dsxxx:xxxItem/$id"
                      }
                    }
                  }
                },
                "cestamp": {
                  "description": "Object cestamp value",
                  "type": "string",
                  "example": "2D70169432D84866A200F907881AC9B1"
                }
              }
            }
          }
        }
      },
      "dscfg_Filterable": {
        "properties": {}
      },
      "dscfg_Filterable_PATCH": {
        "properties": {}
      },
      "setEvolutionEffectivity": {
        "type": "object",
        "properties": {
          "evolutionContent": {
            "type": "string",
            "example": "&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;CfgEffectivityExpression  xmlns=\"urn:com:dassault_systemes:config\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"urn:com:dassault_systemes:config CfgEffectivityExpression.xsd\"&gt;&lt;Expression&gt;&lt;Context HolderType=\"Model\" HolderName=\"Aircraft\"&gt;&lt;TreeSeries Type = \"ProductState\" Name = \"Aircraft\"&gt;&lt;Tree&gt;&lt;Root Name = \"Aircraft\" Revision = \"A\"/&gt;&lt;/Tree&gt;&lt;/TreeSeries&gt;&lt;/Context&gt;&lt;/Expression&gt;&lt;/CfgEffectivityExpression&gt;",
            "description": "The evolution effectivity expression in XML format."
          }
        }
      },
      "setVariantEffectivity": {
        "type": "object",
        "properties": {
          "variantContent": {
            "type": "string",
            "example": "&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;CfgEffectivityExpression xs:schemaLocation = \"urn:com:dassault_systemes:config CfgEffectivityExpression.xsd\" xmlns:xs = \"http://www.w3.org/2001/XMLSchema-instance\" xmlns = \"urn:com:dassault_systemes:config\"&gt;&lt;Expression&gt;&lt;Context HolderType = \"Model\" HolderName = \"Aircraft\"&gt;&lt;Feature Type=\"ConfigFeature\" Name=\"Color\"&gt;&lt;Feature Type=\"ConfigFeature\" Name=\"Red\"/&gt;&lt;/Feature&gt;&lt;/Context&gt;&lt;/Expression&gt;&lt;/CfgEffectivityExpression&gt;",
            "description": "The variant effectivity expression in XML format."
          }
        }
      },
      "attachConfigurationContext": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "identifier": {
              "type": "string",
              "example": "F6AF82561E5700005EB271EE0003C500",
              "description": "The physical id of a model."
            },
            "type": {
              "type": "string",
              "example": "Model",
              "description": "type."
            },
            "source": {
              "type": "string",
              "example": "3DSpace",
              "description": "source."
            },
            "relativePath": {
              "type": "string",
              "example": "/resources/v1/modeler/dspfl/dspfl:Model/F6AF82561E5700005EB271EE0003C500",
              "description": "relativePath."
            }
          }
        }
      },
      "detachConfigurationContext": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "identifier": {
              "type": "string",
              "example": "F6AF82561E5700005EB271EE0003C500",
              "description": "The physical id of a model."
            },
            "type": {
              "type": "string",
              "example": "Model",
              "description": "type."
            },
            "source": {
              "type": "string",
              "example": "3DSpace",
              "description": "source."
            },
            "relativePath": {
              "type": "string",
              "example": "/resources/v1/modeler/dspfl/dspfl:Model/F6AF82561E5700005EB271EE0003C500",
              "description": "relativePath."
            }
          }
        }
      },
      "addEmpty": {
        "example": "{}"
      }
    }
  }
}
