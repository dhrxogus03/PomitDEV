Let Operation(string)
Let TitleString(String)
Let UserPrefix(String)
Let UName(string)
Let FormerlName(string)
Let TypeTitle(string)

let NumberAlignment(INTEGER)
let AbbreviatedBaseTypeName (string)
Let IDNumber(STRING)
Let IDVNumber(STRING)

Let ModelingType(Type)
Let ModelingTypeName(String)
let NamingTypePrefix(STRING)
Let Separator(String) 
Let SiteAffix(STRING)
Let NamingTypeSuffix(STRING)

NumberAlignment=8
AbbreviatedBaseTypeName="ENOStrRefinementSpecification" 
Separator="-"
SiteAffix=""

if ((ThisObject->IsSupporting("ENOStrRefinementSpecification") == false)) {
    Trace (1, "AdvancedFilterBLInitialization: ERROR, Called on an Invalid Object type" )    
    Parameters.Message="wrong usage of rule AdvancedFilterBLInitialization"
    Parameters.Severity=3 
	  Report("Error",Parameters.Message, Parameters.Message)     
} else {
    if (Parameters->HasAttribute("OperationId") == true) {
      Trace (1, "AdvancedFilterBLInitialization, Operation: ", Parameters->GetAttributeString("OperationId")   )
    }      
    Parameters.Severity=0 
}

if ((ThisObject->IsSupporting("ENOStrRefinementSpecification") == false)) {
    Trace (1, "AdvancedFilterBLInitialization: ERROR, called on non Advanced Filter type" )    
} 

/* ---------- */
/* User input */
/* ---------- */
 
UserPrefix=""
if ( Parameters->HasAttribute("IdCloningString") == true ) { /* Cloning/SaveAsNew */
    UserPrefix = Parameters->GetAttributeString("IdCloningString")
    if (UserPrefix == NULL) UserPrefix = ""
}
if ( UserPrefix == "" and Parameters->HasAttribute("IdString") == true ) {
    UserPrefix = Parameters->GetAttributeString("IdString")
    if (UserPrefix == NULL) UserPrefix = ""
}
 Trace (1, "AdvancedFilterBLInitialization, UserPrefix =",UserPrefix)  

/* -------------------------------------------------------------------- */
/* Name  - always Unique according to collab Space configuration center */
/* -------------------------------------------------------------------- */

ModelingType = ThisObject.ModelerType
if (ModelingType<>NULL){
   ModelingTypeName=ModelingType.Name 
}
RetrieveNamingParametersWithSeparator(ModelingTypeName,NamingTypePrefix,SiteAffix,NamingTypeSuffix,Separator,AbbreviatedBaseTypeName)
if ( (NamingTypePrefix == "") or (NamingTypePrefix == NULL) ){
 Trace (1, "AdvancedFilterBLInitialization: No prefix for Type ", ModelingTypeName ," then use Filter" )
 NamingTypePrefix="Filter"
} 
STAutoNumbers(AbbreviatedBaseTypeName, NumberAlignment, IDNumber, IDVNumber)

UName = NamingTypePrefix
if (SiteAffix<>"") UName=UName+Separator+SiteAffix+Separator
UName=UName+IDNumber
if (NamingTypeSuffix<>"") UName=UName+Separator+NamingTypeSuffix

Trace (1, "AdvancedFilterBLInitialization: Name = ", UName)
ThisObject.name = UName

/* -------------------------------------------- */
/* Title - based on existing Title & User Input */
/* -------------------------------------------- */

Operation=Parameters->GetAttributeString("OperationId")

If(Operation=="Cloning")
{
    Trace (1, "AdvancedFilterBLInitialization Cloning: UserPrefix = ", UserPrefix ) 

    if ( ThisObject->HasAttribute("Title") == true ) {
      TitleString = ThisObject.GetAttributeString("Title")
      ThisObject->SetAttributeString("Title",UserPrefix + TitleString )
    }else{
      Trace (1, "AdvancedFilterBLInitialization: ERROR, no title on ThisObject" )    
    }
    Trace (1, "AdvancedFilterBLInitialization Cloning: Title = ", UserPrefix + TitleString ) 

}else if (Operation=="New")
{
   /* nothing more to do, Title is managed thru NGF Save mecanism*/
   /* BL with New just needed to valuate name */
}else{
/* ( Operation=="Implicit" or Operation=="Default")*/ 	
    Trace (1, "AdvancedFilterBLInitialization NON SUPPORTED OPERATION = ", Operation ) 
}


