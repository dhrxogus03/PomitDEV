#Prog VPMEditor_GetAllRepresentations (iPLMIDSet :  #In PLMIDSet,oPLMIDSet :  #Out PLMIDSet) : VoidType
{

let rsTmpRepRepInst(PLMRouteSet)
let rsTmpPortsCnxPRep(PLMRouteSet)
let rsTmpPortsCnxPRepARM(PLMRouteSet)
let rsDocs(PLMRouteSet)
let rsMCXDocs(PLMRouteSet)
let rsPortsOnReps(PLMRouteSet)
let rsPortsOnRepsARM(PLMRouteSet)
let rsDesignTable(PLMRouteSet)
let rsFemRendering(PLMRouteSet)
let rsTmpRulesets(PLMRouteSet)
let rsRuleEntities(PLMRouteSet)
let rsTmpARMRefAndRep(PLMRouteSet)
let rsARM3DPartRepRef(PLMRouteSet)
let rsXCADRepRepInst(PLMRouteSet)
/* RI 548950 - rollback RI 558468
let SetOfReqImplementedComponents(PLMRouteSet)
*/
let rsSPPConnection(PLMRouteSet)
let rsFootPrintConnection(PLMRouteSet)
let rsElecMfgPreprationRelation(PLMRouteSet)
let rsStrConnection(PLMRouteSet)
let PLMRouteSet_Mat(PLMRouteSet)

let idsInputRefs(PLMIDSet)
let idsInputReps(PLMIDSet)
let idsRepRepInst(PLMIDSet)
let idsPortsCnxPRep(PLMIDSet)
let idsPortsCnxPRepARM(PLMIDSet)
let idsMat(PLMIDSet)
let idsRawMat(PLMIDSet)
let idsLayout(PLMIDSet)
let idsTmpDocCnx(PLMIDSet)
let idsTmpDocMcx(PLMIDSet)
let idsTmpAllReps(PLMIDSet)
let idsTmpRulesets(PLMIDSet)
let idsARMRefAndRep(PLMIDSet)
let idsTmpARMRef(PLMIDSet)
let idsConfig(PLMIDSet)
let idsDocument(PLMIDSet)
let idsComposedRep(PLMIDSet)
let idsComposerRef(PLMIDSet)
let idsXCADComposition(PLMIDSet)
let idsXCADDependencies(PLMIDSet)
let idsTerminologies(PLMIDSet)


/* RI 548950 - rollback RI 558468
let SetOfImplementReqSpecIds(PLMIDSet)
let SetOfAllReqSpecObjects(PLMIDSet)
let idsInputForReqSpec(PLMIDSet)
*/


/*              */
/* Filter Input */ 
/*              */

idsInputRefs = Restrict(iPLMIDSet, "PRODUCTCFG/VPMReference")
idsInputReps = Restrict(iPLMIDSet, "PRODUCTCFG/VPMRepReference")

/*           */
/* Enrich Ref with XCAD */ 
/*                      */
idsXCADComposition =  ExecutePLMProcedure("XCAD_CompleteItems", idsInputRefs)
idsInputRefs = idsInputRefs + Restrict(idsXCADComposition, "PRODUCTCFG/VPMReference")

/*                              */
/* Enrich Rep with XCAD Non PS  */ 
/*                              */ 
idsXCADDependencies =  ExecutePLMProcedure("XCAD_CompleteNonPS", idsInputRefs)
idsInputRefs = idsInputRefs + Restrict(idsXCADDependencies, "PRODUCTCFG/VPMReference")


/*           */
/* Ref stuff */ 
/*           */

/* Complete with VPMRepresentation */
rsTmpRepRepInst = ExecutePLMFunction("PRODUCTCFG", "ProductCfg_ExpandVPMRefToVPMRep", idsInputRefs)
idsRepRepInst = Ids(rsTmpRepRepInst)

/* Complete with Ports and Connections (including applicative connections - not materials) and PrivateReps */
rsTmpPortsCnxPRep = ExecutePLMFunction("PRODUCTCFG", "ProductCfg_ExpandVPMRefToPRepVPMPortAppCnx", idsInputRefs)
idsPortsCnxPRep = Ids(rsTmpPortsCnxPRep)

/* Complete with XCADRepRepInsts */
rsXCADRepRepInst = ExecutePLMFunction("XCADAssembly", "XcadAssembly_ExpandVPMRefToXCADRepRepInst", idsInputRefs)


/* Completes with Material procedure */
idsMat = ExecutePLMProcedure("MatAppliedExportDesign", idsInputRefs)

/* Completes with Raw Material procedure */
PLMRouteSet_Mat = ExecutePLMFunction("RawMaterialSpecification","RawMat_retrieveAllAppliedRawMaterial", idsInputRefs)
idsRawMat = Ids(PLMRouteSet_Mat)

/* Call DifPresentation proc (Layout Modelers)*/
idsLayout = ExecutePLMProcedure("DIFModeler_GetAttachedPresentations", idsInputRefs)

/*                */
/* Post Cnx stuff */ 
/*                */

/* Completes with Documents pointed by PLMDocConnection */
idsTmpDocCnx = Restrict(idsPortsCnxPRep, "PLMDocConnection/PLMDocConnection") 
rsDocs = ExecutePLMFunction("PLMDocConnection", "PLMDocConnection_NavDocCnxToDoc", idsTmpDocCnx)

/* Completes with Documents pointed by CATMCXMechanicalConnection */
idsTmpDocMcx = Restrict(idsPortsCnxPRep, "CATMCXAssembly/CATMCXMechanicalConnection") 
rsMCXDocs = ExecutePLMFunction("CATMCXMechanicalConnection", "CATMCXAssembly_NavMCXToDoc", idsTmpDocMcx)

/*                */
/* Post Rep stuff */ 
/*                */

idsTmpAllReps = idsInputReps + Restrict(idsRepRepInst, "PRODUCTCFG/VPMRepReference")

/* Complete with Ports on Reps */
rsPortsOnReps = ExecutePLMFunction("PRODUCTCFG", "ProductCfg_AddVPMPorts", idsTmpAllReps)

/* Completes with PointedDesignTable (Reps/Docs) */
rsDesignTable = ExecutePLMFunction("PLMKnowledgewareDiscipline", "KwaDiscipline_AddPointedDesignTable", idsTmpAllReps)

/* Completes with PLMDMTDocument pointed by a FEM Rep or Rendering Rep */
rsFemRendering = ExecutePLMFunction("PRODUCTCFG", "ProductCfg_NavVPMRepToFemAndRenderingDoc", idsTmpAllReps)

/* Get imported rulesets and then entities (ruleset not in output) */
rsTmpRulesets = ExecutePLMFunction("PLMKnowHowRuleSet", "kwe_navigate_ruleset", idsTmpAllReps)
idsTmpRulesets = Restrict(Ids(rsTmpRulesets), "PLMKnowHowRuleSet/PLMRuleSet")
rsRuleEntities = ExecutePLMFunction("PLMKnowHowRuleSet", "kwe_expand_rules", idsTmpRulesets)

/* Get Core Refs and RepRefs pointed thru ARM link(s) */
rsTmpARMRefAndRep = ExecutePLMFunction("PLMKnowledgewareDiscipline", "KWA_NavVPMRepToARMRefAndRep", idsTmpAllReps)
idsARMRefAndRep = Ids(rsTmpARMRefAndRep)

/* Get 3D Part representation to avoid integrity issues */
idsTmpARMRef = Restrict(idsARMRefAndRep, "PRODUCTCFG/VPMReference")
rsARM3DPartRepRef = ExecutePLMFunction("PRODUCTCFG", "ProductCfg_Add3DPartRepresentation", idsTmpARMRef)


/* TVQ : add ports and connections of the references and representations pointed by resource tables */
rsTmpPortsCnxPRepARM = ExecutePLMFunction("PRODUCTCFG", "ProductCfg_ExpandVPMRefToPRepVPMPortAppCnx", idsTmpARMRef)

idsPortsCnxPRepARM = Ids(rsTmpPortsCnxPRepARM)

/* Complete with Ports on Reps */
rsPortsOnRepsARM = ExecutePLMFunction("PRODUCTCFG", "ProductCfg_AddVPMPorts", Restrict(Ids(rsARM3DPartRepRef), "PRODUCTCFG/VPMRepReference"))


/* FUN118425 - Expand Document associated  products */
idsDocument = ExecutePLMProcedure("DocumentCompletion_allDocumentCompletion", idsInputRefs)


/* FUN129396 Add composed Representations */
idsComposedRep = ExecutePLMProcedure("ComposedRepCompletion_getAllComposedReps", idsInputRefs)


/* FUN129396 Add composed Representations */
idsComposerRef = ExecutePLMProcedure("ComposedRepCompletion_getComposerRef", idsInputReps)


/*        */
/* Config */ 
/*        */

/* Complete with configuration */
idsConfig = ExecutePLMProcedure("Config_GetStructConfig", iPLMIDSet)


/* Complete with SPPConnection for Space Allocation/Space Usage Apps (resp: USV/TL9) */
rsSPPConnection = ExecutePLMFunction("PLMSpacePlanning", "SPPConnection_addAllSPPConnection", idsInputRefs)

/* Completes with StrConnection for Structure Design/Steel Connection Design Apps (resp: m5m/s95) */
rsStrConnection = ExecutePLMFunction("PLMStructureDesign", "StrConnection_addAllStrConnection", idsInputRefs)

/* Complete with PLMPCBPackageFootprintCnx for Circuit Board Design Apps (resp: SRO/SDE30) FUN114215*/
rsFootPrintConnection = ExecutePLMFunction("PLMPCBLibrary", "PLMPCBLibrary_addFootprintConnection", idsInputRefs)

/* Complete with Terminology (Browsing Structure) */
idsTerminologies = ExecuteJavaProcedure("com.dassault_systemes.enovia.xapps.dsbsd.V1.implementations.util.VPMReferenceCompletion", idsInputRefs)

rsElecMfgPreprationRelation = ExecutePLMFunction("ElectricalManufacturingPreparation", "ElecMfgPreparation_addAllRelatedElements", idsInputRefs)

oPLMIDSet = iPLMIDSet + idsRepRepInst + idsPortsCnxPRep + Ids(rsXCADRepRepInst) + idsMat  + idsRawMat + idsLayout + Ids(rsDocs) + Ids(rsMCXDocs) + Ids(rsPortsOnReps) + Ids(rsDesignTable)
          + Ids(rsFemRendering) + Ids(rsRuleEntities) + idsARMRefAndRep + Ids(rsARM3DPartRepRef) + Ids(rsSPPConnection)  + Ids(rsStrConnection) + Ids(rsFootPrintConnection) + Ids(rsElecMfgPreprationRelation) + idsConfig + idsXCADDependencies + idsXCADComposition + idsDocument + idsComposedRep
          + idsComposerRef + idsPortsCnxPRepARM + Ids(rsPortsOnRepsARM) + idsTerminologies
          

}
